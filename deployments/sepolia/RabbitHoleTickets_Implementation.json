{
  "address": "0xb7a10231B968ee4fD13200F7B8dC7b5Cc37436C0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccountBalanceOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayLengthsMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewOwnerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoHandoverRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMinter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC1155ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minterAddress",
          "type": "address"
        }
      ],
      "name": "MinterAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "royaltyFee",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "completeOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "imageIPFSCID",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyRecipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minterAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyFee_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "imageIPFSCID_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "ownershipHandoverExpiresAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownershipHandoverValidFor",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice_",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "imageIPFSCID_",
          "type": "string"
        }
      ],
      "name": "setImageIPFSCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minterAddress_",
          "type": "address"
        }
      ],
      "name": "setMinterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "royaltyFee_",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyRecipient_",
          "type": "address"
        }
      ],
      "name": "setRoyaltyRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId_",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0991f841e05119d0f93797092171a82c661ace51dc88cc314cbb0d40028b553",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x017F8Ad14A2E745ea0F756Bd57CD4852400be78c",
    "contractAddress": null,
    "transactionIndex": 39,
    "gasUsed": "1972791",
    "logsBloom": "0x
    "blockHash": "0x2caf5fa1315d0f8bf46fdd22e2ce997ca757ae3a4e5a3fc5e27cfdfd020aca3f",
    "transactionHash": "0xb0991f841e05119d0f93797092171a82c661ace51dc88cc314cbb0d40028b553",
    "logs": [
      {
        "transactionIndex": 39,
        "blockNumber": 3872774,
        "transactionHash": "0xb0991f841e05119d0f93797092171a82c661ace51dc88cc314cbb0d40028b553",
        "address": "0xb7a10231B968ee4fD13200F7B8dC7b5Cc37436C0",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 38,
        "blockHash": "0x2caf5fa1315d0f8bf46fdd22e2ce997ca757ae3a4e5a3fc5e27cfdfd020aca3f"
      }
    ],
    "blockNumber": 3872774,
    "cumulativeGasUsed": "8823753",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "15d310e06733a1cf603dcb43236dcc91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthsMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMinter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC1155ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"}],\"name\":\"MinterAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imageIPFSCID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyRecipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"imageIPFSCID_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipHandoverValidFor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice_\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"imageIPFSCID_\",\"type\":\"string\"}],\"name\":\"setImageIPFSCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minterAddress_\",\"type\":\"address\"}],\"name\":\"setMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyFee_\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyRecipient_\",\"type\":\"address\"}],\"name\":\"setRoyaltyRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"ArrayLengthsMismatch()\":[{\"details\":\"The lengths of the input arrays are not the same.\"}],\"InsufficientBalance()\":[{\"details\":\"Insufficient balance.\"}],\"NewOwnerIsZeroAddress()\":[{\"details\":\"The `newOwner` cannot be the zero address.\"}],\"NoHandoverRequest()\":[{\"details\":\"The `pendingOwner` does not have a valid handover request.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the tokens.\"}],\"TransferToNonERC1155ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}],\"Unauthorized()\":[{\"details\":\"The caller is not authorized to call the function.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OwnershipHandoverCanceled(address)\":{\"details\":\"The ownership handover to `pendingOwner` has been canceled.\"},\"OwnershipHandoverRequested(address)\":{\"details\":\"An ownership handover to `pendingOwner` has been requested.\"},\"OwnershipTransferred(address,address)\":{\"details\":\"The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of `id` owned by `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length.\"},\"cancelOwnershipHandover()\":{\"details\":\"Cancels the two-step ownership handover to the caller, if any.\"},\"completeOwnershipHandover(address)\":{\"details\":\"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"mint(address,uint256,uint256,bytes)\":{\"details\":\"mint a single ticket, only callable by the allowed minter\",\"params\":{\"amount_\":\"the amount of the ticket to mint\",\"data_\":\"the data to pass to the mint function\",\"id_\":\"the id of the ticket to mint\",\"to_\":\"the address to mint the ticket to\"}},\"mintBatch(address,uint256[],uint256[],bytes)\":{\"details\":\"mint a batch of tickets, only callable by the allowed minter\",\"params\":{\"amounts_\":\"the amounts of the tickets to mint\",\"data_\":\"the data to pass to the mint function\",\"ids_\":\"the ids of the tickets to mint\",\"to_\":\"the address to mint the tickets to\"}},\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"ownershipHandoverExpiresAt(address)\":{\"details\":\"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\"},\"ownershipHandoverValidFor()\":{\"details\":\"Returns how long a two-step ownership handover is valid for in seconds.\"},\"renounceOwnership()\":{\"details\":\"Allows the owner to renounce their ownership.\"},\"requestOwnershipHandover()\":{\"details\":\"Request a two-step ownership handover to the caller. The request will be automatically expire in 48 hours (172800 seconds) by default.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IERC165-royaltyInfo}\",\"params\":{\"salePrice_\":\"the sale price\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReveived}, which is called upon a batch transfer. Emits a {TransferBatch} event.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Reveived}, which is called upon a batch transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event.\"},\"setImageIPFSCID(string)\":{\"details\":\"set the image IPFS CID\",\"params\":{\"imageIPFSCID_\":\"the image IPFS CID\"}},\"setMinterAddress(address)\":{\"details\":\"set the minter address\",\"params\":{\"minterAddress_\":\"the address of the minter\"}},\"setRoyaltyFee(uint256)\":{\"details\":\"set the royalty fee\",\"params\":{\"royaltyFee_\":\"the royalty fee\"}},\"setRoyaltyRecipient(address)\":{\"details\":\"set the royalty recipient\",\"params\":{\"royaltyRecipient_\":\"the address of the royalty recipient\"}},\"supportsInterface(bytes4)\":{\"details\":\"returns true if the supplied interface id is supported\",\"params\":{\"interfaceId_\":\"the interface id\"}},\"transferOwnership(address)\":{\"details\":\"Allows the owner to transfer the ownership to `newOwner`.\"},\"uri(uint256)\":{\"details\":\"returns the token uri\",\"params\":{\"tokenId_\":\"the token id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RabbitHoleTickets.sol\":\"RabbitHoleTickets\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/RabbitHoleTickets.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport {Ownable} from 'solady/src/auth/Ownable.sol';\\nimport {ERC1155} from 'solady/src/tokens/ERC1155.sol';\\nimport {Base64} from 'solady/src/utils/Base64.sol';\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {IERC165Upgradeable, IERC2981Upgradeable} from '@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol';\\n\\ncontract RabbitHoleTickets is\\n    Initializable,\\n    Ownable,\\n    ERC1155,\\n    IERC2981Upgradeable\\n{\\n    error OnlyMinter();\\n\\n    event RoyaltyFeeSet(uint256 indexed royaltyFee);\\n    event MinterAddressSet(address indexed minterAddress);\\n\\n    // storage\\n    address public royaltyRecipient;\\n    address public minterAddress;\\n    uint public royaltyFee;\\n    string public imageIPFSCID;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address royaltyRecipient_,\\n        address minterAddress_,\\n        uint royaltyFee_,\\n        address owner_,\\n        string memory imageIPFSCID_\\n    ) external initializer {\\n        _initializeOwner(owner_);\\n        royaltyRecipient = royaltyRecipient_;\\n        minterAddress = minterAddress_;\\n        royaltyFee = royaltyFee_;\\n        imageIPFSCID = imageIPFSCID_;\\n    }\\n\\n    modifier onlyMinter() {\\n        if (msg.sender != minterAddress) revert OnlyMinter();\\n        _;\\n    }\\n\\n    /// @dev set the image IPFS CID\\n    /// @param imageIPFSCID_ the image IPFS CID\\n    function setImageIPFSCID(string memory imageIPFSCID_) external onlyOwner {\\n        imageIPFSCID = imageIPFSCID_;\\n    }\\n\\n    /// @dev set the royalty recipient\\n    /// @param royaltyRecipient_ the address of the royalty recipient\\n    function setRoyaltyRecipient(address royaltyRecipient_) external onlyOwner {\\n        royaltyRecipient = royaltyRecipient_;\\n    }\\n\\n    /// @dev set the royalty fee\\n    /// @param royaltyFee_ the royalty fee\\n    function setRoyaltyFee(uint256 royaltyFee_) external onlyOwner {\\n        royaltyFee = royaltyFee_;\\n        emit RoyaltyFeeSet(royaltyFee_);\\n    }\\n\\n    /// @dev set the minter address\\n    /// @param minterAddress_ the address of the minter\\n    function setMinterAddress(address minterAddress_) external onlyOwner {\\n        minterAddress = minterAddress_;\\n        emit MinterAddressSet(minterAddress_);\\n    }\\n\\n    /// @dev mint a single ticket, only callable by the allowed minter\\n    /// @param to_ the address to mint the ticket to\\n    /// @param id_ the id of the ticket to mint\\n    /// @param amount_ the amount of the ticket to mint\\n    /// @param data_ the data to pass to the mint function\\n    function mint(address to_, uint256 id_, uint256 amount_, bytes memory data_) external onlyMinter {\\n        _mint(to_, id_, amount_, data_);\\n    }\\n\\n    /// @dev mint a batch of tickets, only callable by the allowed minter\\n    /// @param to_ the address to mint the tickets to\\n    /// @param ids_ the ids of the tickets to mint\\n    /// @param amounts_ the amounts of the tickets to mint\\n    /// @param data_ the data to pass to the mint function\\n    function mintBatch(\\n        address to_,\\n        uint256[] memory ids_,\\n        uint256[] memory amounts_,\\n        bytes memory data_\\n    ) external onlyMinter {\\n        _batchMint(to_, ids_, amounts_, data_);\\n    }\\n\\n    /// @dev returns the token uri\\n    /// @param tokenId_ the token id\\n    function uri(uint256 tokenId_)\\n        public\\n        view\\n        override(ERC1155)\\n        returns (string memory)\\n    {\\n        bytes memory dataURI = generateDataURI(tokenId_);\\n        return string(abi.encodePacked('data:application/json;base64,', Base64.encode(dataURI)));\\n    }\\n\\n    /// @dev returns the data uri in json format\\n    function generateDataURI(uint256 tokenId_) internal view virtual returns (bytes memory) {\\n        bytes memory dataURI = abi.encodePacked(\\n            '{',\\n            '\\\"name\\\": \\\"',\\n            \\\"RabbitHole Ticket\\\",\\n            '\\\",',\\n            '\\\"description\\\": \\\"',\\n            \\\"RabbitHole Tickets\\\",\\n            '\\\",',\\n            '\\\"image\\\": \\\"',\\n            tokenImage(imageIPFSCID),\\n            '\\\"',\\n            '}'\\n        );\\n        return dataURI;\\n    }\\n\\n    function tokenImage(string memory imageIPFSCID_) internal view virtual returns (string memory) {\\n        return string(abi.encodePacked('ipfs://', imageIPFSCID_));\\n    }\\n\\n    /// @dev See {IERC165-royaltyInfo}\\n    /// @param salePrice_ the sale price\\n    function royaltyInfo(\\n        uint256,\\n        uint256 salePrice_\\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\\n        uint256 royaltyPayment = (salePrice_ * royaltyFee) / 10_000;\\n        return (royaltyRecipient, royaltyPayment);\\n    }\\n\\n    /// @dev returns true if the supplied interface id is supported\\n    /// @param interfaceId_ the interface id\\n    function supportsInterface(\\n        bytes4 interfaceId_\\n    ) public view virtual override(ERC1155, IERC165Upgradeable) returns (bool) {\\n        return interfaceId_ == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId_);\\n    }\\n}\",\"keccak256\":\"0x24e4db62c9c63b2246bc4ff28e74cb8bf93609a76de6ac80863279a6388ed241\",\"license\":\"UNLICENSED\"},\"solady/src/auth/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n/// @dev While the ownable portion follows [EIP-173](https://eips.ethereum.org/EIPS/eip-173)\\n/// for compatibility, the nomenclature for the 2-step ownership handover\\n/// may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The owner slot is given by: `not(_OWNER_SLOT_NOT)`.\\n    /// It is intentionally chosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    uint256 private constant _OWNER_SLOT_NOT = 0x8b78c6d8;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Store the new value.\\n            sstore(not(_OWNER_SLOT_NOT), newOwner)\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ownerSlot := not(_OWNER_SLOT_NOT)\\n            // Clean the upper 96 bits.\\n            newOwner := shr(96, shl(96, newOwner))\\n            // Emit the {OwnershipTransferred} event.\\n            log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n            // Store the new value.\\n            sstore(ownerSlot, newOwner)\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(not(_OWNER_SLOT_NOT)))) {\\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will be automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(not(_OWNER_SLOT_NOT))\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    function ownershipHandoverValidFor() public view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x75727636324bbe778d1e323970d29179a4cfdf291cbe4c4567ca149e9acef42a\",\"license\":\"MIT\"},\"solady/src/tokens/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC1155 implementation.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC1155.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC1155/ERC1155.sol)\\n///\\n/// @dev Note:\\n/// The ERC1155 standard allows for self-approvals.\\n/// For performance, this implementation WILL NOT revert for such actions.\\n/// Please add any checks with overrides if desired.\\nabstract contract ERC1155 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The lengths of the input arrays are not the same.\\n    error ArrayLengthsMismatch();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Insufficient balance.\\n    error InsufficientBalance();\\n\\n    /// @dev Only the token owner or an approved account can manage the tokens.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC1155Receiver interface.\\n    error TransferToNonERC1155ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when `amount` of token `id` is transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 amount\\n    );\\n\\n    /// @dev Emitted when `amounts` of token `ids` are transferred\\n    /// from `from` to `to` by `operator`.\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] amounts\\n    );\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev Emitted when the Uniform Resource Identifier (URI) for token `id`\\n    /// is updated to `value`. This event is not used in the base contract.\\n    /// You may need to emit this event depending on your URI logic.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    event URI(string value, uint256 indexed id);\\n\\n    /// @dev `keccak256(bytes(\\\"TransferSingle(address,address,address,uint256,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_SINGLE_EVENT_SIGNATURE =\\n        0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62;\\n\\n    /// @dev `keccak256(bytes(\\\"TransferBatch(address,address,address,uint256[],uint256[])\\\"))`.\\n    uint256 private constant _TRANSFER_BATCH_EVENT_SIGNATURE =\\n        0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The `ownerSlotSeed` of a given owner is given by.\\n    /// ```\\n    ///     let ownerSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner))\\n    /// ```\\n    ///\\n    /// The balance slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, id)\\n    ///     let balanceSlot := keccak256(0x00, 0x40)\\n    /// ```\\n    ///\\n    /// The operator approval slot of `owner` is given by.\\n    /// ```\\n    ///     mstore(0x20, ownerSlotSeed)\\n    ///     mstore(0x00, operator)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x34)\\n    /// ```\\n    uint256 private constant _ERC1155_MASTER_SLOT_SEED = 0x9a31110384e0b0c9;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC1155 METADATA                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the URI for token `id`.\\n    ///\\n    /// You can either return the same templated URI for all token IDs,\\n    /// (e.g. \\\"https://example.com/api/{id}.json\\\"),\\n    /// or return a unique URI for each `id`.\\n    ///\\n    /// See: https://eips.ethereum.org/EIPS/eip-1155#metadata\\n    function uri(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          ERC1155                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the amount of `id` owned by `owner`.\\n    function balanceOf(address owner, uint256 id) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, id)\\n            result := sload(keccak256(0x00, 0x40))\\n        }\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, owner)\\n            mstore(0x00, operator)\\n            result := sload(keccak256(0x0c, 0x34))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, caller())\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-line\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Reveived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, toSlotSeed)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), from, to)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155Received} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                // Prepare the calldata.\\n                let m := mload(0x40)\\n                // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n                mstore(m, 0xf23a6e61)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                mstore(add(m, 0x60), id)\\n                mstore(add(m, 0x80), amount)\\n                mstore(add(m, 0xa0), 0xa0)\\n                calldatacopy(add(m, 0xc0), sub(data.offset, 0x20), add(0x20, data.length))\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, data.length), m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(0x00, 0x00, returndatasize())\\n                        revert(0x00, returndatasize())\\n                    }\\n                    mstore(m, 0)\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If the caller is not `from`,\\n    ///   it must be approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReveived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) public virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, amounts.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, from))\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, shl(96, to))\\n            mstore(0x20, fromSlotSeed)\\n            // Clear the upper 96 bits.\\n            from := shr(96, fromSlotSeed)\\n            to := shr(96, toSlotSeed)\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If the caller is not `from`, do the authorization check.\\n            if iszero(eq(caller(), from)) {\\n                mstore(0x00, caller())\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                let end := shl(5, ids.length)\\n                for { let i := 0 } iszero(eq(i, end)) { i := add(i, 0x20) } {\\n                    let amount := calldataload(add(amounts.offset, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, calldataload(add(ids.offset, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, ids.length))\\n                let o := add(m, 0x40)\\n                calldatacopy(o, sub(ids.offset, 0x20), n)\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, n))\\n                o := add(o, n)\\n                n := add(0x20, shl(5, amounts.length))\\n                calldatacopy(o, sub(amounts.offset, 0x20), n)\\n                n := sub(add(o, n), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), from, to)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransferCalldata(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Do the {onERC1155BatchReceived} check if `to` is a smart contract.\\n            if extcodesize(to) {\\n                let m := mload(0x40)\\n                // Prepare the calldata.\\n                // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n                mstore(m, 0xbc197c81)\\n                mstore(add(m, 0x20), caller())\\n                mstore(add(m, 0x40), from)\\n                // Copy the `ids`.\\n                mstore(add(m, 0x60), 0xa0)\\n                let n := add(0x20, shl(5, ids.length))\\n                let o := add(m, 0xc0)\\n                calldatacopy(o, sub(ids.offset, 0x20), n)\\n                // Copy the `amounts`.\\n                let s := add(0xa0, n)\\n                mstore(add(m, 0x80), s)\\n                o := add(o, n)\\n                n := add(0x20, shl(5, amounts.length))\\n                calldatacopy(o, sub(amounts.offset, 0x20), n)\\n                // Copy the `data`.\\n                mstore(add(m, 0xa0), add(s, n))\\n                o := add(o, n)\\n                n := add(0x20, data.length)\\n                calldatacopy(o, sub(data.offset, 0x20), n)\\n                n := sub(add(o, n), add(m, 0x1c))\\n                // Revert if the call reverts.\\n                if iszero(call(gas(), to, 0, add(m, 0x1c), n, m, 0x20)) {\\n                    if returndatasize() {\\n                        // Bubble up the revert if the call reverts.\\n                        returndatacopy(0x00, 0x00, returndatasize())\\n                        revert(0x00, returndatasize())\\n                    }\\n                    mstore(m, 0)\\n                }\\n                // Load the returndata and compare it with the function selector.\\n                if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                    mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the amounts of `ids` for `owners.\\n    ///\\n    /// Requirements:\\n    /// - `owners` and `ids` must have the same length.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory balances)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(ids.length, owners.length)) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            balances := mload(0x40)\\n            mstore(balances, ids.length)\\n            let o := add(balances, 0x20)\\n            let end := shl(5, ids.length)\\n            mstore(0x40, add(end, o))\\n            // Loop through all the `ids` and load the balances.\\n            for { let i := 0 } iszero(eq(i, end)) { i := add(i, 0x20) } {\\n                let owner := calldataload(add(owners.offset, i))\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, shl(96, owner)))\\n                mstore(0x00, calldataload(add(ids.offset, i)))\\n                mstore(add(o, i), sload(keccak256(0x00, 0x40)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC1155: 0xd9b67a26, ERC1155MetadataURI: 0x0e89341c.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0xd9b67a26)), eq(s, 0x0e89341c))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints `amount` of `id` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Reveived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n                mstore(0x14, to)\\n                mstore(0x00, id)\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x00, id)\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(address(0), to, id, amount, data);\\n    }\\n\\n    /// @dev Mints `amounts` of `ids` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReveived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                let end := shl(5, mload(ids))\\n                for { let i := 0 } iszero(eq(i, end)) {} {\\n                    i := add(i, 0x20)\\n                    let amount := mload(add(amounts, i))\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), 0, shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(address(0), to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(address(0), to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), from, id, amount)`.\\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\\n        _burn(address(0), from, id, amount);\\n    }\\n\\n    /// @dev Destroys `amount` of `id` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address by, address from, uint256 id, uint256 amount) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            if iszero(or(iszero(shl(96, by)), eq(shl(96, by), from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Decrease and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x00, id)\\n            mstore(0x20, amount)\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), _single(id), _single(amount), \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_batchBurn(address(0), from, ids, amounts)`.\\n    function _batchBurn(address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        _batchBurn(address(0), from, ids, amounts);\\n    }\\n\\n    /// @dev Destroys `amounts` of `ids` from `from`.\\n    ///\\n    /// Requirements:\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _batchBurn(address by, address from, uint256[] memory ids, uint256[] memory amounts)\\n        internal\\n        virtual\\n    {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                let end := shl(5, mload(ids))\\n                for { let i := 0 } iszero(eq(i, end)) {} {\\n                    i := add(i, 0x20)\\n                    let amount := mload(add(amounts, i))\\n                    // Decrease and store the updated balance of `to`.\\n                    {\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), 0)\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, address(0), ids, amounts, \\\"\\\");\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits a {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x20, _ERC1155_MASTER_SLOT_SEED)\\n            mstore(0x14, by)\\n            mstore(0x00, operator)\\n            sstore(keccak256(0x0c, 0x34), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            let m := shr(96, not(0))\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, and(m, by), and(m, operator))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_safeTransfer(address(0), from, to, id, amount, data)`.\\n    function _safeTransfer(address from, address to, uint256 id, uint256 amount, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _safeTransfer(address(0), from, to, id, amount, data);\\n    }\\n\\n    /// @dev Transfers `amount` of `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `from` must have at least `amount` of `id`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155Reveived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, from_))\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Subtract and store the updated balance of `from`.\\n            {\\n                mstore(0x00, id)\\n                let fromBalanceSlot := keccak256(0x00, 0x40)\\n                let fromBalance := sload(fromBalanceSlot)\\n                if gt(amount, fromBalance) {\\n                    mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(fromBalanceSlot, sub(fromBalance, amount))\\n            }\\n            // Increase and store the updated balance of `to`.\\n            {\\n                mstore(0x20, or(_ERC1155_MASTER_SLOT_SEED, to_))\\n                let toBalanceSlot := keccak256(0x00, 0x40)\\n                let toBalanceBefore := sload(toBalanceSlot)\\n                let toBalanceAfter := add(toBalanceBefore, amount)\\n                if lt(toBalanceAfter, toBalanceBefore) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceAfter)\\n            }\\n            // Emit a {TransferSingle} event.\\n            mstore(0x20, amount)\\n            // forgefmt: disable-next-line\\n            log4(0x00, 0x40, _TRANSFER_SINGLE_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, _single(id), _single(amount), data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155Received(from, to, id, amount, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeBatchTransfer(address(0), from, to, ids, amounts, data)`.\\n    function _safeBatchTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _safeBatchTransfer(address(0), from, to, ids, amounts, data);\\n    }\\n\\n    /// @dev Transfers `amounts` of `ids` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    /// - `to` cannot be the zero address.\\n    /// - `ids` and `amounts` must have the same length.\\n    /// - `from` must have at least `amounts` of `ids`.\\n    /// - If `by` is not the zero address, it must be either `from`,\\n    ///   or approved to manage the tokens of `from`.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {ERC1155-onERC1155BatchReveived}, which is called upon a batch transfer.\\n    ///\\n    /// Emits a {TransferBatch} event.\\n    function _safeBatchTransfer(\\n        address by,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        if (_useBeforeTokenTransfer()) {\\n            _beforeTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(eq(mload(ids), mload(amounts))) {\\n                mstore(0x00, 0x3b800a46) // `ArrayLengthsMismatch()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let from_ := shl(96, from)\\n            let to_ := shl(96, to)\\n            // Revert if `to` is the zero address.\\n            if iszero(to_) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            let fromSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, from_)\\n            let toSlotSeed := or(_ERC1155_MASTER_SLOT_SEED, to_)\\n            mstore(0x20, fromSlotSeed)\\n            // If `by` is not the zero address, and not equal to `from`,\\n            // check if it is approved to manage all the tokens of `from`.\\n            let by_ := shl(96, by)\\n            if iszero(or(iszero(by_), eq(by_, from_))) {\\n                mstore(0x00, by)\\n                if iszero(sload(keccak256(0x0c, 0x34))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Loop through all the `ids` and update the balances.\\n            {\\n                let end := shl(5, mload(ids))\\n                for { let i := 0 } iszero(eq(i, end)) {} {\\n                    i := add(i, 0x20)\\n                    let amount := mload(add(amounts, i))\\n                    // Subtract and store the updated balance of `from`.\\n                    {\\n                        mstore(0x20, fromSlotSeed)\\n                        mstore(0x00, mload(add(ids, i)))\\n                        let fromBalanceSlot := keccak256(0x00, 0x40)\\n                        let fromBalance := sload(fromBalanceSlot)\\n                        if gt(amount, fromBalance) {\\n                            mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(fromBalanceSlot, sub(fromBalance, amount))\\n                    }\\n                    // Increase and store the updated balance of `to`.\\n                    {\\n                        mstore(0x20, toSlotSeed)\\n                        let toBalanceSlot := keccak256(0x00, 0x40)\\n                        let toBalanceBefore := sload(toBalanceSlot)\\n                        let toBalanceAfter := add(toBalanceBefore, amount)\\n                        if lt(toBalanceAfter, toBalanceBefore) {\\n                            mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                            revert(0x1c, 0x04)\\n                        }\\n                        sstore(toBalanceSlot, toBalanceAfter)\\n                    }\\n                }\\n            }\\n            // Emit a {TransferBatch} event.\\n            {\\n                let m := mload(0x40)\\n                // Copy the `ids`.\\n                mstore(m, 0x40)\\n                let n := add(0x20, shl(5, mload(ids)))\\n                let o := add(m, 0x40)\\n                pop(staticcall(gas(), 4, ids, n, o, n))\\n                // Copy the `amounts`.\\n                mstore(add(m, 0x20), add(0x40, returndatasize()))\\n                o := add(o, returndatasize())\\n                n := add(0x20, shl(5, mload(amounts)))\\n                pop(staticcall(gas(), 4, amounts, n, o, n))\\n                n := sub(add(o, returndatasize()), m)\\n                // Do the emit.\\n                log4(m, n, _TRANSFER_BATCH_EVENT_SIGNATURE, caller(), shr(96, from_), shr(96, to_))\\n            }\\n        }\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n        if (_hasCode(to)) _checkOnERC1155BatchReceived(from, to, ids, amounts, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override this function to return true if `_beforeTokenTransfer` is used.\\n    /// The is to help the compiler avoid producing dead bytecode.\\n    function _useBeforeTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called before any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /// @dev Override this function to return true if `_afterTokenTransfer` is used.\\n    /// The is to help the compiler avoid producing dead bytecode.\\n    function _useAfterTokenTransfer() internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    /// @dev Hook that is called after any token transfer.\\n    /// This includes minting and burning, as well as batched variants.\\n    ///\\n    /// The same hook is called on both single and batched variants.\\n    /// For single transfers, the length of the `id` and `amount` arrays are 1.\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Helper for calling the `_afterTokenTransfer` hook.\\n    /// The is to help the compiler avoid producing dead bytecode.\\n    function _afterTokenTransferCalldata(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) private {\\n        if (_useAfterTokenTransfer()) {\\n            _afterTokenTransfer(from, to, ids, amounts, data);\\n        }\\n    }\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155Received(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155Received(address,address,uint256,uint256,bytes)`.\\n            mstore(m, 0xf23a6e61)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), amount)\\n            mstore(add(m, 0xa0), 0xa0)\\n            let n := mload(data)\\n            mstore(add(m, 0xc0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xe0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(0xc4, n), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(0x00, 0x00, returndatasize())\\n                    revert(0x00, returndatasize())\\n                }\\n                mstore(m, 0)\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xf23a6e61))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC1155Receiver-onERC1155BatchReceived} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC1155BatchReceived(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            // `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`.\\n            mstore(m, 0xbc197c81)\\n            mstore(add(m, 0x20), caller())\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            // Copy the `ids`.\\n            mstore(add(m, 0x60), 0xa0)\\n            let n := add(0x20, shl(5, mload(ids)))\\n            let o := add(m, 0xc0)\\n            pop(staticcall(gas(), 4, ids, n, o, n))\\n            // Copy the `amounts`.\\n            let s := add(0xa0, returndatasize())\\n            mstore(add(m, 0x80), s)\\n            o := add(o, returndatasize())\\n            n := add(0x20, shl(5, mload(amounts)))\\n            pop(staticcall(gas(), 4, amounts, n, o, n))\\n            // Copy the `data`.\\n            mstore(add(m, 0xa0), add(s, returndatasize()))\\n            o := add(o, returndatasize())\\n            n := add(0x20, mload(data))\\n            pop(staticcall(gas(), 4, data, n, o, n))\\n            n := sub(add(o, returndatasize()), add(m, 0x1c))\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), n, m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(0x00, 0x00, returndatasize())\\n                    revert(0x00, returndatasize())\\n                }\\n                mstore(m, 0)\\n            }\\n            // Load the returndata and compare it with the function selector.\\n            if iszero(eq(mload(m), shl(224, 0xbc197c81))) {\\n                mstore(0x00, 0x9c05499b) // `TransferToNonERC1155ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `x` in an array with a single element.\\n    function _single(uint256 x) private pure returns (uint256[] memory result) {\\n        assembly {\\n            result := mload(0x40)\\n            mstore(0x40, add(result, 0x40))\\n            mstore(result, 1)\\n            mstore(add(result, 0x20), x)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc5b0ef62652f917d837aa60462e871d9e22077e5f69bbd63bec1b2eeffbba9a5\",\"license\":\"MIT\"},\"solady/src/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library to encode strings in Base64.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\\n/// @author Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos - <brecht@loopring.org>.\\nlibrary Base64 {\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n    /// @param noPadding Whether to strip away the padding.\\n    function encode(bytes memory data, bool fileSafe, bool noPadding)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                // Multiply by 4/3 rounded up.\\n                // The `shl(2, ...)` is equivalent to multiplying by 4.\\n                let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n                // Set `result` to point to the start of the free memory.\\n                result := mload(0x40)\\n\\n                // Store the table into the scratch space.\\n                // Offsetted by -1 byte so that the `mload` will load the character.\\n                // We will rewrite the free memory pointer at `0x40` later with\\n                // the allocated size.\\n                // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n                mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n                mstore(0x3f, sub(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0230)))\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, encodedLength)\\n\\n                // Run over the input, 3 bytes at a time.\\n                for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(0, mload(and(shr(18, input), 0x3F)))\\n                    mstore8(1, mload(and(shr(12, input), 0x3F)))\\n                    mstore8(2, mload(and(shr(6, input), 0x3F)))\\n                    mstore8(3, mload(and(input, 0x3F)))\\n                    mstore(ptr, mload(0x00))\\n\\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\\n                // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\\n                let o := div(2, mod(dataLength, 3))\\n                // Offset `ptr` and pad with '='. We can simply write over the end.\\n                mstore(sub(ptr, o), shl(240, 0x3d3d))\\n                // Set `o` to zero if there is padding.\\n                o := mul(iszero(iszero(noPadding)), o)\\n                mstore(sub(ptr, o), 0) // Zeroize the slot after the string.\\n                mstore(result, sub(encodedLength, o)) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, false, false)`.\\n    function encode(bytes memory data) internal pure returns (string memory result) {\\n        result = encode(data, false, false);\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, fileSafe, false)`.\\n    function encode(bytes memory data, bool fileSafe)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = encode(data, fileSafe, false);\\n    }\\n\\n    /// @dev Decodes base64 encoded `data`.\\n    ///\\n    /// Supports:\\n    /// - RFC 4648 (both standard and file-safe mode).\\n    /// - RFC 3501 (63: ',').\\n    ///\\n    /// Does not support:\\n    /// - Line breaks.\\n    ///\\n    /// Note: For performance reasons,\\n    /// this function will NOT revert on invalid `data` inputs.\\n    /// Outputs for invalid inputs will simply be undefined behaviour.\\n    /// It is the user's responsibility to ensure that the `data`\\n    /// is a valid base64 encoded string.\\n    function decode(string memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                let decodedLength := mul(shr(2, dataLength), 3)\\n\\n                for {} 1 {} {\\n                    // If padded.\\n                    if iszero(and(dataLength, 3)) {\\n                        let t := xor(mload(add(data, dataLength)), 0x3d3d)\\n                        // forgefmt: disable-next-item\\n                        decodedLength := sub(\\n                            decodedLength,\\n                            add(iszero(byte(30, t)), iszero(byte(31, t)))\\n                        )\\n                        break\\n                    }\\n                    // If non-padded.\\n                    decodedLength := add(decodedLength, sub(and(dataLength, 3), 1))\\n                    break\\n                }\\n                result := mload(0x40)\\n\\n                // Write the length of the bytes.\\n                mstore(result, decodedLength)\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, decodedLength)\\n\\n                // Load the table into the scratch space.\\n                // Constants are optimized for smaller bytecode with zero gas overhead.\\n                // `m` also doubles as the mask of the upper 6 bits.\\n                let m := 0xfc000000fc00686c7074787c8084888c9094989ca0a4a8acb0b4b8bcc0c4c8cc\\n                mstore(0x5b, m)\\n                mstore(0x3b, 0x04080c1014181c2024282c3034383c4044484c5054585c6064)\\n                mstore(0x1a, 0xf8fcf800fcd0d4d8dce0e4e8ecf0f4)\\n\\n                for {} 1 {} {\\n                    // Read 4 bytes.\\n                    data := add(data, 4)\\n                    let input := mload(data)\\n\\n                    // Write 3 bytes.\\n                    // forgefmt: disable-next-item\\n                    mstore(ptr, or(\\n                        and(m, mload(byte(28, input))),\\n                        shr(6, or(\\n                            and(m, mload(byte(29, input))),\\n                            shr(6, or(\\n                                and(m, mload(byte(30, input))),\\n                                shr(6, mload(byte(31, input)))\\n                            ))\\n                        ))\\n                    ))\\n                    ptr := add(ptr, 3)\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\\n                mstore(end, 0) // Zeroize the slot after the bytes.\\n                mstore(0x60, 0) // Restore the zero slot.\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0eac6b2bff6e62c421d51f4c99f90e2643ae4d682b330cd2c03801950f4d99a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61225680620000ee6000396000f3fe6080604052600436106101b65760003560e01c80635ea3af4c116100ec578063b8997a971161008a578063f04e283e11610064578063f04e283e14610538578063f242432a1461054b578063f2fde38b1461056b578063fee81cf41461057e57600080fd5b8063b8997a97146104cb578063d7533f02146104e1578063e985e9c5146104ff57600080fd5b80638da5cb5b116100c65780638da5cb5b14610452578063a22cb4651461046b578063a3106b951461048b578063a4a53539146104ab57600080fd5b80635ea3af4c1461040a578063715018a61461042a578063731133e91461043257600080fd5b806334d722c911610159578063498719bc11610133578063498719bc1461038d5780634c00de82146103a25780634e1273f4146103d557806354d1f13d1461040257600080fd5b806334d722c9146102fb5780633e4086e51461034d57806341e42f301461036d57600080fd5b80631f7fdffa116101955780631f7fdffa1461026557806325692962146102875780632a55205a1461028f5780632eb2c2d6146102db57600080fd5b8062fdd58e146101bb57806301ffc9a7146102085780630e89341c14610238575b600080fd5b3480156101c757600080fd5b506101f56101d6366004611718565b679a31110384e0b0c96020526014919091526000908152604090205490565b6040519081526020015b60405180910390f35b34801561021457600080fd5b50610228610223366004611742565b6105b1565b60405190151581526020016101ff565b34801561024457600080fd5b5061025861025336600461178b565b61062a565b6040516101ff91906117c8565b34801561027157600080fd5b5061028561028036600461194b565b610669565b005b6102856106cc565b34801561029b57600080fd5b506102af6102aa3660046119e4565b61071c565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101ff565b3480156102e757600080fd5b506102856102f6366004611a8d565b610768565b34801561030757600080fd5b506001546103289073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ff565b34801561035957600080fd5b5061028561036836600461178b565b6109cd565b34801561037957600080fd5b50610285610388366004611b48565b610a08565b34801561039957600080fd5b50610258610a5d565b3480156103ae57600080fd5b506000546103289062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156103e157600080fd5b506103f56103f0366004611b63565b610aeb565b6040516101ff9190611bcf565b610285610b5b565b34801561041657600080fd5b50610285610425366004611c13565b610b97565b610285610dc1565b34801561043e57600080fd5b5061028561044d366004611c8c565b610dd5565b34801561045e57600080fd5b50638b78c6d81954610328565b34801561047757600080fd5b50610285610486366004611ce1565b610e32565b34801561049757600080fd5b506102856104a6366004611b48565b610e88565b3480156104b757600080fd5b506102856104c6366004611d1d565b610eff565b3480156104d757600080fd5b506101f560025481565b3480156104ed57600080fd5b506040516202a30081526020016101ff565b34801561050b57600080fd5b5061022861051a366004611d5a565b679a31110384e0b0c96020526014919091526000526034600c205490565b610285610546366004611b48565b610f17565b34801561055757600080fd5b50610285610566366004611d8d565b610f57565b610285610579366004611b48565b6110df565b34801561058a57600080fd5b506101f5610599366004611b48565b63389a75e1600c908152600091909152602090205490565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a0000000000000000000000000000000000000000000000000000000014806106245750610624826301ffc9a760e09190911c90811463d9b67a26821417630e89341c9091141790565b92915050565b6060600061063783611106565b9050610642816111c4565b6040516020016106529190611e05565b604051602081830303815290604052915050919050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ba576040517f9cdc2ed500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106c6848484846111d2565b50505050565b60006202a30067ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b6000806000612710600254856107329190611e4a565b61073c9190611e88565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1693509150505b9250929050565b82851461077d57633b800a466000526004601cfd5b8760601b679a31110384e0b0c9178760601b679a31110384e0b0c917816020528160601c99508060601c9850886107bc5763ea553b346000526004601cfd5b8933146107df57336000526034600c20546107df57634b6e7f186000526004601cfd5b8660051b60005b818114610850578088013584602052818b013560005260406000208054808311156108195763f4d678b86000526004601cfd5b829003905560208490526040600020805480830181811015610843576301336cea6000526004601cfd5b90915550506020016107e6565b50505050604051604081528560051b602001604082018160208a03823760408201602084810191909152600587901b01910181601f198801823701819003888a337f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8486a450506108bf600090565b156108d4576108d488888888888888886112ec565b863b156109c35760405163bc197c81815233602082015288604082015260a060608201528560051b60200160c082018160208a0382378160a00180608085015282820191508660051b602001925082602089038337820160a084015260208401910181601f1986018237018190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe40160208282601c820160008d5af161098a573d15610985573d6000803e3d6000fd5b600082525b5080517fbc197c8100000000000000000000000000000000000000000000000000000000146109c157639c05499b6000526004601cfd5b505b5050505050505050565b6109d56112f1565b600281905560405181907fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c90600090a250565b610a106112f1565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b60038054610a6a90611ec3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9690611ec3565b8015610ae35780601f10610ab857610100808354040283529160200191610ae3565b820191906000526020600020905b815481529060010190602001808311610ac657829003601f168201915b505050505081565b6060838214610b0257633b800a466000526004601cfd5b6040519050818152602081018260051b81810160405260005b818114610b5057679a31110384e0b0c98882013560601b17602090815286820135600090815260409020548483015201610b1b565b505050949350505050565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b600054610100900460ff1615808015610bb75750600054600160ff909116105b80610bd15750303b158015610bd1575060005460ff166001145b610c61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840160405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610cbf57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610cc88361130c565b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8981169190910291909117909155600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691871691909117905560028490556003610d558382611f61565b508015610db957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b610dc96112f1565b610dd36000611355565b565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e26576040517f9cdc2ed500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106c6848484846113a0565b8015159050679a31110384e0b0c96020523360145281600052806034600c2055806000528160601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a35050565b610e906112f1565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f09e32743122b4d02dc06c38a35ee1587a02854644d47574bb35a6ef75a22fa9890600090a250565b610f076112f1565b6003610f138282611f61565b5050565b610f1f6112f1565b63389a75e1600c52806000526020600c208054421115610f4757636f5e88186000526004601cfd5b60009055610f5481611355565b50565b8560601b679a31110384e0b0c9178560601b679a31110384e0b0c917816020528160601c97508060601c965086610f965763ea553b346000526004601cfd5b873314610fb957336000526034600c2054610fb957634b6e7f186000526004601cfd5b8560005260406000209150815480861115610fdc5763f4d678b86000526004601cfd5b8581038355508060205260406000209150815485810181811015611008576301336cea6000526004601cfd5b909255505060208390528486337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406000a4843b15610db95760405163f23a6e61815233602082015286604082015284606082015283608082015260a080820152816020016020840360c08301376020818360c401601c840160008a5af16110a0573d1561109b573d6000803e3d6000fd5b600081525b80517ff23a6e6100000000000000000000000000000000000000000000000000000000146110d657639c05499b6000526004601cfd5b50505050505050565b6110e76112f1565b8060601b6110fd57637448fbae6000526004601cfd5b610f5481611355565b6060600061119d6003805461111a90611ec3565b80601f016020809104026020016040519081016040528092919081815260200182805461114690611ec3565b80156111935780601f1061116857610100808354040283529160200191611193565b820191906000526020600020905b81548152906001019060200180831161117657829003601f168201915b505050505061143c565b6040516020016111ad919061205d565b60408051601f198184030181529190529392505050565b606061062482600080611465565b81518351146111e957633b800a466000526004601cfd5b8360601b806112005763ea553b346000526004601cfd5b80679a31110384e0b0c917602052835160051b60005b818114611259576020810190508085015181870151600052604060002080548281018181101561124e576301336cea6000526004601cfd5b909155506112169050565b505060405160408152845160051b602001604082018181838960045afa503d60400160208401523d81019050855160051b60200191508181838860045afa50823d8201039150508260601c6000337f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8486a45050506112d6600090565b50833b156106c6576106c6600085858585611568565b6109c3565b638b78c6d819543314610dd3576382b429006000526004601cfd5b73ffffffffffffffffffffffffffffffffffffffff16638b78c6d8198190558060007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a350565b638b78c6d819805473ffffffffffffffffffffffffffffffffffffffff9092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355565b8360601b806113b75763ea553b346000526004601cfd5b679a31110384e0b0c9602052846014528360005260406000208054848101818110156113eb576301336cea6000526004601cfd5b80835550505083600052826020528060601c6000337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406000a450833b156106c6576106c6600085858585611643565b60608160405160200161144f91906121db565b6040516020818303038152906040529050919050565b606083518015611560576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526102308515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f03603f52602083018181015b6003880197508751603f8160121c1651600053603f81600c1c1651600153603f8160061c1651600253603f8116516003535060005182526004820191508082106114d5576020016040527f3d3d000000000000000000000000000000000000000000000000000000000000600384066002048083039190915260008615159091029182900352900382525b509392505050565b60405163bc197c8181523360208201528560601b60601c604082015260a06060820152835160051b60200160c082018181838860045afa503d60a0018060808501523d82019150855160051b60200192508282848860045afa503d0160a0840152835160200191503d018181818660045afa50601c83013d82010391505060208282601c850160008a5af161160c573d15611607573d6000803e3d6000fd5b600082525b5080517fbc197c810000000000000000000000000000000000000000000000000000000014610db957639c05499b6000526004601cfd5b60405163f23a6e6181523360208201528560601b60601c604082015283606082015282608082015260a08082015281518060c0830152801561168f578060e08301826020860160045afa505b6020828260c401601c850160008a5af16116b8573d156116b3573d6000803e3d6000fd5b600082525b5080517ff23a6e610000000000000000000000000000000000000000000000000000000014610db957639c05499b6000526004601cfd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461171357600080fd5b919050565b6000806040838503121561172b57600080fd5b611734836116ef565b946020939093013593505050565b60006020828403121561175457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461178457600080fd5b9392505050565b60006020828403121561179d57600080fd5b5035919050565b60005b838110156117bf5781810151838201526020016117a7565b50506000910152565b60208152600082518060208401526117e78160408501602087016117a4565b601f01601f19169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611853576118536117fb565b604052919050565b600082601f83011261186c57600080fd5b8135602067ffffffffffffffff821115611888576118886117fb565b8160051b61189782820161182a565b92835284810182019282810190878511156118b157600080fd5b83870192505b848310156118d0578235825291830191908301906118b7565b979650505050505050565b600082601f8301126118ec57600080fd5b813567ffffffffffffffff811115611906576119066117fb565b6119196020601f19601f8401160161182a565b81815284602083860101111561192e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561196157600080fd5b61196a856116ef565b9350602085013567ffffffffffffffff8082111561198757600080fd5b6119938883890161185b565b945060408701359150808211156119a957600080fd5b6119b58883890161185b565b935060608701359150808211156119cb57600080fd5b506119d8878288016118db565b91505092959194509250565b600080604083850312156119f757600080fd5b50508035926020909101359150565b60008083601f840112611a1857600080fd5b50813567ffffffffffffffff811115611a3057600080fd5b6020830191508360208260051b850101111561076157600080fd5b60008083601f840112611a5d57600080fd5b50813567ffffffffffffffff811115611a7557600080fd5b60208301915083602082850101111561076157600080fd5b60008060008060008060008060a0898b031215611aa957600080fd5b611ab2896116ef565b9750611ac060208a016116ef565b9650604089013567ffffffffffffffff80821115611add57600080fd5b611ae98c838d01611a06565b909850965060608b0135915080821115611b0257600080fd5b611b0e8c838d01611a06565b909650945060808b0135915080821115611b2757600080fd5b50611b348b828c01611a4b565b999c989b5096995094979396929594505050565b600060208284031215611b5a57600080fd5b611784826116ef565b60008060008060408587031215611b7957600080fd5b843567ffffffffffffffff80821115611b9157600080fd5b611b9d88838901611a06565b90965094506020870135915080821115611bb657600080fd5b50611bc387828801611a06565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015611c0757835183529284019291840191600101611beb565b50909695505050505050565b600080600080600060a08688031215611c2b57600080fd5b611c34866116ef565b9450611c42602087016116ef565b935060408601359250611c57606087016116ef565b9150608086013567ffffffffffffffff811115611c7357600080fd5b611c7f888289016118db565b9150509295509295909350565b60008060008060808587031215611ca257600080fd5b611cab856116ef565b93506020850135925060408501359150606085013567ffffffffffffffff811115611cd557600080fd5b6119d8878288016118db565b60008060408385031215611cf457600080fd5b611cfd836116ef565b915060208301358015158114611d1257600080fd5b809150509250929050565b600060208284031215611d2f57600080fd5b813567ffffffffffffffff811115611d4657600080fd5b611d52848285016118db565b949350505050565b60008060408385031215611d6d57600080fd5b611d76836116ef565b9150611d84602084016116ef565b90509250929050565b60008060008060008060a08789031215611da657600080fd5b611daf876116ef565b9550611dbd602088016116ef565b94506040870135935060608701359250608087013567ffffffffffffffff811115611de757600080fd5b611df389828a01611a4b565b979a9699509497509295939492505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611e3d81601d8501602087016117a4565b91909101601d0192915050565b8082028115828204841417610624577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611ebe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181811c90821680611ed757607f821691505b602082108103611f10577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115611f5c57600081815260208120601f850160051c81016020861015611f3d5750805b601f850160051c820191505b81811015610db957828155600101611f49565b505050565b815167ffffffffffffffff811115611f7b57611f7b6117fb565b611f8f81611f898454611ec3565b84611f16565b602080601f831160018114611fe25760008415611fac5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610db9565b600085815260208120601f198616915b8281101561201157888601518255948401946001909101908401611ff2565b508582101561204d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f7b0000000000000000000000000000000000000000000000000000000000000081527f226e616d65223a2022000000000000000000000000000000000000000000000060018201527f526162626974486f6c65205469636b6574000000000000000000000000000000600a82015260007f222c00000000000000000000000000000000000000000000000000000000000080601b8401527f226465736372697074696f6e223a202200000000000000000000000000000000601d8401527f526162626974486f6c65205469636b6574730000000000000000000000000000602d84015280603f840152507f22696d616765223a2022000000000000000000000000000000000000000000006041830152825161218181604b8501602087016117a4565b7f2200000000000000000000000000000000000000000000000000000000000000604b9390910192830152507f7d00000000000000000000000000000000000000000000000000000000000000604c820152604d01919050565b7f697066733a2f2f000000000000000000000000000000000000000000000000008152600082516122138160078501602087016117a4565b919091016007019291505056fea26469706673582212204c6042b571ae3d42b322cda85fd087f6da29470efd7eefda583009a1e93c23eb64736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106101b65760003560e01c80635ea3af4c116100ec578063b8997a971161008a578063f04e283e11610064578063f04e283e14610538578063f242432a1461054b578063f2fde38b1461056b578063fee81cf41461057e57600080fd5b8063b8997a97146104cb578063d7533f02146104e1578063e985e9c5146104ff57600080fd5b80638da5cb5b116100c65780638da5cb5b14610452578063a22cb4651461046b578063a3106b951461048b578063a4a53539146104ab57600080fd5b80635ea3af4c1461040a578063715018a61461042a578063731133e91461043257600080fd5b806334d722c911610159578063498719bc11610133578063498719bc1461038d5780634c00de82146103a25780634e1273f4146103d557806354d1f13d1461040257600080fd5b806334d722c9146102fb5780633e4086e51461034d57806341e42f301461036d57600080fd5b80631f7fdffa116101955780631f7fdffa1461026557806325692962146102875780632a55205a1461028f5780632eb2c2d6146102db57600080fd5b8062fdd58e146101bb57806301ffc9a7146102085780630e89341c14610238575b600080fd5b3480156101c757600080fd5b506101f56101d6366004611718565b679a31110384e0b0c96020526014919091526000908152604090205490565b6040519081526020015b60405180910390f35b34801561021457600080fd5b50610228610223366004611742565b6105b1565b60405190151581526020016101ff565b34801561024457600080fd5b5061025861025336600461178b565b61062a565b6040516101ff91906117c8565b34801561027157600080fd5b5061028561028036600461194b565b610669565b005b6102856106cc565b34801561029b57600080fd5b506102af6102aa3660046119e4565b61071c565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016101ff565b3480156102e757600080fd5b506102856102f6366004611a8d565b610768565b34801561030757600080fd5b506001546103289073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ff565b34801561035957600080fd5b5061028561036836600461178b565b6109cd565b34801561037957600080fd5b50610285610388366004611b48565b610a08565b34801561039957600080fd5b50610258610a5d565b3480156103ae57600080fd5b506000546103289062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156103e157600080fd5b506103f56103f0366004611b63565b610aeb565b6040516101ff9190611bcf565b610285610b5b565b34801561041657600080fd5b50610285610425366004611c13565b610b97565b610285610dc1565b34801561043e57600080fd5b5061028561044d366004611c8c565b610dd5565b34801561045e57600080fd5b50638b78c6d81954610328565b34801561047757600080fd5b50610285610486366004611ce1565b610e32565b34801561049757600080fd5b506102856104a6366004611b48565b610e88565b3480156104b757600080fd5b506102856104c6366004611d1d565b610eff565b3480156104d757600080fd5b506101f560025481565b3480156104ed57600080fd5b506040516202a30081526020016101ff565b34801561050b57600080fd5b5061022861051a366004611d5a565b679a31110384e0b0c96020526014919091526000526034600c205490565b610285610546366004611b48565b610f17565b34801561055757600080fd5b50610285610566366004611d8d565b610f57565b610285610579366004611b48565b6110df565b34801561058a57600080fd5b506101f5610599366004611b48565b63389a75e1600c908152600091909152602090205490565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a0000000000000000000000000000000000000000000000000000000014806106245750610624826301ffc9a760e09190911c90811463d9b67a26821417630e89341c9091141790565b92915050565b6060600061063783611106565b9050610642816111c4565b6040516020016106529190611e05565b604051602081830303815290604052915050919050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106ba576040517f9cdc2ed500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106c6848484846111d2565b50505050565b60006202a30067ffffffffffffffff164201905063389a75e1600c5233600052806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d600080a250565b6000806000612710600254856107329190611e4a565b61073c9190611e88565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1693509150505b9250929050565b82851461077d57633b800a466000526004601cfd5b8760601b679a31110384e0b0c9178760601b679a31110384e0b0c917816020528160601c99508060601c9850886107bc5763ea553b346000526004601cfd5b8933146107df57336000526034600c20546107df57634b6e7f186000526004601cfd5b8660051b60005b818114610850578088013584602052818b013560005260406000208054808311156108195763f4d678b86000526004601cfd5b829003905560208490526040600020805480830181811015610843576301336cea6000526004601cfd5b90915550506020016107e6565b50505050604051604081528560051b602001604082018160208a03823760408201602084810191909152600587901b01910181601f198801823701819003888a337f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8486a450506108bf600090565b156108d4576108d488888888888888886112ec565b863b156109c35760405163bc197c81815233602082015288604082015260a060608201528560051b60200160c082018160208a0382378160a00180608085015282820191508660051b602001925082602089038337820160a084015260208401910181601f1986018237018190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe40160208282601c820160008d5af161098a573d15610985573d6000803e3d6000fd5b600082525b5080517fbc197c8100000000000000000000000000000000000000000000000000000000146109c157639c05499b6000526004601cfd5b505b5050505050505050565b6109d56112f1565b600281905560405181907fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c90600090a250565b610a106112f1565b6000805473ffffffffffffffffffffffffffffffffffffffff90921662010000027fffffffffffffffffffff0000000000000000000000000000000000000000ffff909216919091179055565b60038054610a6a90611ec3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9690611ec3565b8015610ae35780601f10610ab857610100808354040283529160200191610ae3565b820191906000526020600020905b815481529060010190602001808311610ac657829003601f168201915b505050505081565b6060838214610b0257633b800a466000526004601cfd5b6040519050818152602081018260051b81810160405260005b818114610b5057679a31110384e0b0c98882013560601b17602090815286820135600090815260409020548483015201610b1b565b505050949350505050565b63389a75e1600c523360005260006020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92600080a2565b600054610100900460ff1615808015610bb75750600054600160ff909116105b80610bd15750303b158015610bd1575060005460ff166001145b610c61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840160405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610cbf57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610cc88361130c565b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8981169190910291909117909155600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001691871691909117905560028490556003610d558382611f61565b508015610db957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b610dc96112f1565b610dd36000611355565b565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e26576040517f9cdc2ed500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106c6848484846113a0565b8015159050679a31110384e0b0c96020523360145281600052806034600c2055806000528160601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160206000a35050565b610e906112f1565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f09e32743122b4d02dc06c38a35ee1587a02854644d47574bb35a6ef75a22fa9890600090a250565b610f076112f1565b6003610f138282611f61565b5050565b610f1f6112f1565b63389a75e1600c52806000526020600c208054421115610f4757636f5e88186000526004601cfd5b60009055610f5481611355565b50565b8560601b679a31110384e0b0c9178560601b679a31110384e0b0c917816020528160601c97508060601c965086610f965763ea553b346000526004601cfd5b873314610fb957336000526034600c2054610fb957634b6e7f186000526004601cfd5b8560005260406000209150815480861115610fdc5763f4d678b86000526004601cfd5b8581038355508060205260406000209150815485810181811015611008576301336cea6000526004601cfd5b909255505060208390528486337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406000a4843b15610db95760405163f23a6e61815233602082015286604082015284606082015283608082015260a080820152816020016020840360c08301376020818360c401601c840160008a5af16110a0573d1561109b573d6000803e3d6000fd5b600081525b80517ff23a6e6100000000000000000000000000000000000000000000000000000000146110d657639c05499b6000526004601cfd5b50505050505050565b6110e76112f1565b8060601b6110fd57637448fbae6000526004601cfd5b610f5481611355565b6060600061119d6003805461111a90611ec3565b80601f016020809104026020016040519081016040528092919081815260200182805461114690611ec3565b80156111935780601f1061116857610100808354040283529160200191611193565b820191906000526020600020905b81548152906001019060200180831161117657829003601f168201915b505050505061143c565b6040516020016111ad919061205d565b60408051601f198184030181529190529392505050565b606061062482600080611465565b81518351146111e957633b800a466000526004601cfd5b8360601b806112005763ea553b346000526004601cfd5b80679a31110384e0b0c917602052835160051b60005b818114611259576020810190508085015181870151600052604060002080548281018181101561124e576301336cea6000526004601cfd5b909155506112169050565b505060405160408152845160051b602001604082018181838960045afa503d60400160208401523d81019050855160051b60200191508181838860045afa50823d8201039150508260601c6000337f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8486a45050506112d6600090565b50833b156106c6576106c6600085858585611568565b6109c3565b638b78c6d819543314610dd3576382b429006000526004601cfd5b73ffffffffffffffffffffffffffffffffffffffff16638b78c6d8198190558060007f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a350565b638b78c6d819805473ffffffffffffffffffffffffffffffffffffffff9092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a355565b8360601b806113b75763ea553b346000526004601cfd5b679a31110384e0b0c9602052846014528360005260406000208054848101818110156113eb576301336cea6000526004601cfd5b80835550505083600052826020528060601c6000337fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6260406000a450833b156106c6576106c6600085858585611643565b60608160405160200161144f91906121db565b6040516020818303038152906040529050919050565b606083518015611560576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526102308515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f03603f52602083018181015b6003880197508751603f8160121c1651600053603f81600c1c1651600153603f8160061c1651600253603f8116516003535060005182526004820191508082106114d5576020016040527f3d3d000000000000000000000000000000000000000000000000000000000000600384066002048083039190915260008615159091029182900352900382525b509392505050565b60405163bc197c8181523360208201528560601b60601c604082015260a06060820152835160051b60200160c082018181838860045afa503d60a0018060808501523d82019150855160051b60200192508282848860045afa503d0160a0840152835160200191503d018181818660045afa50601c83013d82010391505060208282601c850160008a5af161160c573d15611607573d6000803e3d6000fd5b600082525b5080517fbc197c810000000000000000000000000000000000000000000000000000000014610db957639c05499b6000526004601cfd5b60405163f23a6e6181523360208201528560601b60601c604082015283606082015282608082015260a08082015281518060c0830152801561168f578060e08301826020860160045afa505b6020828260c401601c850160008a5af16116b8573d156116b3573d6000803e3d6000fd5b600082525b5080517ff23a6e610000000000000000000000000000000000000000000000000000000014610db957639c05499b6000526004601cfd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461171357600080fd5b919050565b6000806040838503121561172b57600080fd5b611734836116ef565b946020939093013593505050565b60006020828403121561175457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461178457600080fd5b9392505050565b60006020828403121561179d57600080fd5b5035919050565b60005b838110156117bf5781810151838201526020016117a7565b50506000910152565b60208152600082518060208401526117e78160408501602087016117a4565b601f01601f19169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611853576118536117fb565b604052919050565b600082601f83011261186c57600080fd5b8135602067ffffffffffffffff821115611888576118886117fb565b8160051b61189782820161182a565b92835284810182019282810190878511156118b157600080fd5b83870192505b848310156118d0578235825291830191908301906118b7565b979650505050505050565b600082601f8301126118ec57600080fd5b813567ffffffffffffffff811115611906576119066117fb565b6119196020601f19601f8401160161182a565b81815284602083860101111561192e57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561196157600080fd5b61196a856116ef565b9350602085013567ffffffffffffffff8082111561198757600080fd5b6119938883890161185b565b945060408701359150808211156119a957600080fd5b6119b58883890161185b565b935060608701359150808211156119cb57600080fd5b506119d8878288016118db565b91505092959194509250565b600080604083850312156119f757600080fd5b50508035926020909101359150565b60008083601f840112611a1857600080fd5b50813567ffffffffffffffff811115611a3057600080fd5b6020830191508360208260051b850101111561076157600080fd5b60008083601f840112611a5d57600080fd5b50813567ffffffffffffffff811115611a7557600080fd5b60208301915083602082850101111561076157600080fd5b60008060008060008060008060a0898b031215611aa957600080fd5b611ab2896116ef565b9750611ac060208a016116ef565b9650604089013567ffffffffffffffff80821115611add57600080fd5b611ae98c838d01611a06565b909850965060608b0135915080821115611b0257600080fd5b611b0e8c838d01611a06565b909650945060808b0135915080821115611b2757600080fd5b50611b348b828c01611a4b565b999c989b5096995094979396929594505050565b600060208284031215611b5a57600080fd5b611784826116ef565b60008060008060408587031215611b7957600080fd5b843567ffffffffffffffff80821115611b9157600080fd5b611b9d88838901611a06565b90965094506020870135915080821115611bb657600080fd5b50611bc387828801611a06565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015611c0757835183529284019291840191600101611beb565b50909695505050505050565b600080600080600060a08688031215611c2b57600080fd5b611c34866116ef565b9450611c42602087016116ef565b935060408601359250611c57606087016116ef565b9150608086013567ffffffffffffffff811115611c7357600080fd5b611c7f888289016118db565b9150509295509295909350565b60008060008060808587031215611ca257600080fd5b611cab856116ef565b93506020850135925060408501359150606085013567ffffffffffffffff811115611cd557600080fd5b6119d8878288016118db565b60008060408385031215611cf457600080fd5b611cfd836116ef565b915060208301358015158114611d1257600080fd5b809150509250929050565b600060208284031215611d2f57600080fd5b813567ffffffffffffffff811115611d4657600080fd5b611d52848285016118db565b949350505050565b60008060408385031215611d6d57600080fd5b611d76836116ef565b9150611d84602084016116ef565b90509250929050565b60008060008060008060a08789031215611da657600080fd5b611daf876116ef565b9550611dbd602088016116ef565b94506040870135935060608701359250608087013567ffffffffffffffff811115611de757600080fd5b611df389828a01611a4b565b979a9699509497509295939492505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611e3d81601d8501602087016117a4565b91909101601d0192915050565b8082028115828204841417610624577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082611ebe577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181811c90821680611ed757607f821691505b602082108103611f10577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115611f5c57600081815260208120601f850160051c81016020861015611f3d5750805b601f850160051c820191505b81811015610db957828155600101611f49565b505050565b815167ffffffffffffffff811115611f7b57611f7b6117fb565b611f8f81611f898454611ec3565b84611f16565b602080601f831160018114611fe25760008415611fac5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610db9565b600085815260208120601f198616915b8281101561201157888601518255948401946001909101908401611ff2565b508582101561204d57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f7b0000000000000000000000000000000000000000000000000000000000000081527f226e616d65223a2022000000000000000000000000000000000000000000000060018201527f526162626974486f6c65205469636b6574000000000000000000000000000000600a82015260007f222c00000000000000000000000000000000000000000000000000000000000080601b8401527f226465736372697074696f6e223a202200000000000000000000000000000000601d8401527f526162626974486f6c65205469636b6574730000000000000000000000000000602d84015280603f840152507f22696d616765223a2022000000000000000000000000000000000000000000006041830152825161218181604b8501602087016117a4565b7f2200000000000000000000000000000000000000000000000000000000000000604b9390910192830152507f7d00000000000000000000000000000000000000000000000000000000000000604c820152604d01919050565b7f697066733a2f2f000000000000000000000000000000000000000000000000008152600082516122138160078501602087016117a4565b919091016007019291505056fea26469706673582212204c6042b571ae3d42b322cda85fd087f6da29470efd7eefda583009a1e93c23eb64736f6c63430008120033",
  "devdoc": {
    "errors": {
      "AccountBalanceOverflow()": [
        {
          "details": "The recipient's balance has overflowed."
        }
      ],
      "ArrayLengthsMismatch()": [
        {
          "details": "The lengths of the input arrays are not the same."
        }
      ],
      "InsufficientBalance()": [
        {
          "details": "Insufficient balance."
        }
      ],
      "NewOwnerIsZeroAddress()": [
        {
          "details": "The `newOwner` cannot be the zero address."
        }
      ],
      "NoHandoverRequest()": [
        {
          "details": "The `pendingOwner` does not have a valid handover request."
        }
      ],
      "NotOwnerNorApproved()": [
        {
          "details": "Only the token owner or an approved account can manage the tokens."
        }
      ],
      "TransferToNonERC1155ReceiverImplementer()": [
        {
          "details": "Cannot safely transfer to a contract that does not implement the ERC1155Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "details": "Cannot mint or transfer to the zero address."
        }
      ],
      "Unauthorized()": [
        {
          "details": "The caller is not authorized to call the function."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "OwnershipHandoverCanceled(address)": {
        "details": "The ownership handover to `pendingOwner` has been canceled."
      },
      "OwnershipHandoverRequested(address)": {
        "details": "An ownership handover to `pendingOwner` has been requested."
      },
      "OwnershipTransferred(address,address)": {
        "details": "The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Emitted when `amounts` of token `ids` are transferred from `from` to `to` by `operator`."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `amount` of token `id` is transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the Uniform Resource Identifier (URI) for token `id` is updated to `value`. This event is not used in the base contract. You may need to emit this event depending on your URI logic. See: https://eips.ethereum.org/EIPS/eip-1155#metadata"
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "Returns the amount of `id` owned by `owner`."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "Returns the amounts of `ids` for `owners. Requirements: - `owners` and `ids` must have the same length."
      },
      "cancelOwnershipHandover()": {
        "details": "Cancels the two-step ownership handover to the caller, if any."
      },
      "completeOwnershipHandover(address)": {
        "details": "Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
      },
      "mint(address,uint256,uint256,bytes)": {
        "details": "mint a single ticket, only callable by the allowed minter",
        "params": {
          "amount_": "the amount of the ticket to mint",
          "data_": "the data to pass to the mint function",
          "id_": "the id of the ticket to mint",
          "to_": "the address to mint the ticket to"
        }
      },
      "mintBatch(address,uint256[],uint256[],bytes)": {
        "details": "mint a batch of tickets, only callable by the allowed minter",
        "params": {
          "amounts_": "the amounts of the tickets to mint",
          "data_": "the data to pass to the mint function",
          "ids_": "the ids of the tickets to mint",
          "to_": "the address to mint the tickets to"
        }
      },
      "owner()": {
        "details": "Returns the owner of the contract."
      },
      "ownershipHandoverExpiresAt(address)": {
        "details": "Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."
      },
      "ownershipHandoverValidFor()": {
        "details": "Returns how long a two-step ownership handover is valid for in seconds."
      },
      "renounceOwnership()": {
        "details": "Allows the owner to renounce their ownership."
      },
      "requestOwnershipHandover()": {
        "details": "Request a two-step ownership handover to the caller. The request will be automatically expire in 48 hours (172800 seconds) by default."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See {IERC165-royaltyInfo}",
        "params": {
          "salePrice_": "the sale price"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "Transfers `amounts` of `ids` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - `ids` and `amounts` must have the same length. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155BatchReveived}, which is called upon a batch transfer. Emits a {TransferBatch} event."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `amount` of `id` from `from` to `to`. Requirements: - `to` cannot be the zero address. - `from` must have at least `amount` of `id`. - If the caller is not `from`,   it must be approved to manage the tokens of `from`. - If `to` refers to a smart contract, it must implement   {ERC1155-onERC1155Reveived}, which is called upon a batch transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits a {ApprovalForAll} event."
      },
      "setImageIPFSCID(string)": {
        "details": "set the image IPFS CID",
        "params": {
          "imageIPFSCID_": "the image IPFS CID"
        }
      },
      "setMinterAddress(address)": {
        "details": "set the minter address",
        "params": {
          "minterAddress_": "the address of the minter"
        }
      },
      "setRoyaltyFee(uint256)": {
        "details": "set the royalty fee",
        "params": {
          "royaltyFee_": "the royalty fee"
        }
      },
      "setRoyaltyRecipient(address)": {
        "details": "set the royalty recipient",
        "params": {
          "royaltyRecipient_": "the address of the royalty recipient"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "returns true if the supplied interface id is supported",
        "params": {
          "interfaceId_": "the interface id"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the owner to transfer the ownership to `newOwner`."
      },
      "uri(uint256)": {
        "details": "returns the token uri",
        "params": {
          "tokenId_": "the token id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 434,
        "contract": "contracts/RabbitHoleTickets.sol:RabbitHoleTickets",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 437,
        "contract": "contracts/RabbitHoleTickets.sol:RabbitHoleTickets",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9047,
        "contract": "contracts/RabbitHoleTickets.sol:RabbitHoleTickets",
        "label": "royaltyRecipient",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9049,
        "contract": "contracts/RabbitHoleTickets.sol:RabbitHoleTickets",
        "label": "minterAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9051,
        "contract": "contracts/RabbitHoleTickets.sol:RabbitHoleTickets",
        "label": "royaltyFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9053,
        "contract": "contracts/RabbitHoleTickets.sol:RabbitHoleTickets",
        "label": "imageIPFSCID",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}