{
  "address": "0xb7d86a00f1fa52DC39646467A4CeFec215de41a3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minterAddress",
          "type": "address"
        }
      ],
      "name": "MinterAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "royaltyFee",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "QuestFactoryContract",
      "outputs": [
        {
          "internalType": "contract IQuestFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ReceiptRendererContract",
      "outputs": [
        {
          "internalType": "contract ReceiptRenderer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "questId_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "claimingAddress_",
          "type": "address"
        }
      ],
      "name": "getOwnedTokenIdsOfQuest",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiptRenderer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "royaltyRecipient_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "minterAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyFee_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "questId_",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questIdForTokenId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice_",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minterAddress_",
          "type": "address"
        }
      ],
      "name": "setMinterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "questFactory_",
          "type": "address"
        }
      ],
      "name": "setQuestFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiptRenderer_",
          "type": "address"
        }
      ],
      "name": "setReceiptRenderer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "royaltyFee_",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyRecipient_",
          "type": "address"
        }
      ],
      "name": "setRoyaltyRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId_",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timestampForTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3865287bb4203efe375a978c445cc69fd79dffb8e1eacbf2c8931356972453d8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x017F8Ad14A2E745ea0F756Bd57CD4852400be78c",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "2813401",
    "logsBloom": "0x
    "blockHash": "0x48b33a3eb96e26d08c8014c5915b58ff97a71d9cb02e9926c9126d2b9e15f692",
    "transactionHash": "0x3865287bb4203efe375a978c445cc69fd79dffb8e1eacbf2c8931356972453d8",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 2678939,
        "transactionHash": "0x3865287bb4203efe375a978c445cc69fd79dffb8e1eacbf2c8931356972453d8",
        "address": "0xb7d86a00f1fa52DC39646467A4CeFec215de41a3",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 26,
        "blockHash": "0x48b33a3eb96e26d08c8014c5915b58ff97a71d9cb02e9926c9126d2b9e15f692"
      }
    ],
    "blockNumber": 2678939,
    "cumulativeGasUsed": "4587716",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9306f4c25391ad4ec6eb93d634be18c0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minterAddress\",\"type\":\"address\"}],\"name\":\"MinterAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"royaltyFee\",\"type\":\"uint256\"}],\"name\":\"RoyaltyFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"QuestFactoryContract\",\"outputs\":[{\"internalType\":\"contract IQuestFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ReceiptRendererContract\",\"outputs\":[{\"internalType\":\"contract ReceiptRenderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"questId_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"claimingAddress_\",\"type\":\"address\"}],\"name\":\"getOwnedTokenIdsOfQuest\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiptRenderer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"royaltyRecipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minterAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyFee_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"questId_\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questIdForTokenId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice_\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minterAddress_\",\"type\":\"address\"}],\"name\":\"setMinterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"questFactory_\",\"type\":\"address\"}],\"name\":\"setQuestFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiptRenderer_\",\"type\":\"address\"}],\"name\":\"setReceiptRenderer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyFee_\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyRecipient_\",\"type\":\"address\"}],\"name\":\"setRoyaltyRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId_\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timestampForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getOwnedTokenIdsOfQuest(string,address)\":{\"details\":\"get the token ids for a quest owned by an address\",\"params\":{\"claimingAddress_\":\"the address claiming to own the tokens\",\"questId_\":\"the quest id\"}},\"getTokenId()\":{\"details\":\"get the current token id\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"mint(address,string)\":{\"details\":\"mint a receipt\",\"params\":{\"questId_\":\"the quest id\",\"to_\":\"the address to mint to\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"See {IERC165-royaltyInfo}\",\"params\":{\"salePrice_\":\"the sale price\",\"tokenId_\":\"the token id\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setMinterAddress(address)\":{\"details\":\"set the minter address\",\"params\":{\"minterAddress_\":\"the address of the minter\"}},\"setQuestFactory(address)\":{\"details\":\"set the quest factory contract\",\"params\":{\"questFactory_\":\"the address of the quest factory contract\"}},\"setReceiptRenderer(address)\":{\"details\":\"set the receipt renderer contract\",\"params\":{\"receiptRenderer_\":\"the address of the receipt renderer contract\"}},\"setRoyaltyFee(uint256)\":{\"details\":\"set the royalty fee\",\"params\":{\"royaltyFee_\":\"the royalty fee\"}},\"setRoyaltyRecipient(address)\":{\"details\":\"set the royalty recipient\",\"params\":{\"royaltyRecipient_\":\"the address of the royalty recipient\"}},\"supportsInterface(bytes4)\":{\"details\":\"returns true if the supplied interface id is supported\",\"params\":{\"interfaceId_\":\"the interface id\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"return the token uri, this delegates to the receipt renderer contract\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RabbitHoleReceipt.sol\":\"RabbitHoleReceipt\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x2a6a0b9fd2d316dcb4141159a9d13be92654066d6c0ae92757ed908ecdfecff0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xbd5c6f8268a1d477f6a746ebedaf7fbcf412186f0c1c54ee104547cfb5e18edd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// Modified to pass in the owner address to the constructor\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address owner_) internal onlyInitializing {\\n        __Ownable_init_unchained(owner_);\\n    }\\n\\n    function __Ownable_init_unchained(address owner_) internal onlyInitializing {\\n        _transferOwnership(owner_);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x0279e6e510e77eb02b6736a58ae2487aa76464d0121c14ba7a7fe017c606e449\",\"license\":\"MIT\"},\"contracts/RabbitHoleReceipt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.16;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol';\\nimport {OwnableUpgradeable} from './OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol';\\nimport './ReceiptRenderer.sol';\\nimport './interfaces/IQuestFactory.sol';\\nimport './interfaces/IQuest.sol';\\n\\ncontract RabbitHoleReceipt is\\n    Initializable,\\n    ERC721Upgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721URIStorageUpgradeable,\\n    OwnableUpgradeable,\\n    IERC2981Upgradeable\\n{\\n    event RoyaltyFeeSet(uint256 indexed royaltyFee);\\n    event MinterAddressSet(address indexed minterAddress);\\n\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    CountersUpgradeable.Counter private _tokenIds;\\n\\n    // storage\\n    mapping(uint => string) public questIdForTokenId;\\n    address public royaltyRecipient;\\n    address public minterAddress;\\n    uint public royaltyFee;\\n    mapping(uint => uint) public timestampForTokenId;\\n    ReceiptRenderer public ReceiptRendererContract;\\n    IQuestFactory public QuestFactoryContract;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address receiptRenderer_,\\n        address royaltyRecipient_,\\n        address minterAddress_,\\n        uint royaltyFee_,\\n        address owner_\\n    ) external initializer {\\n        __ERC721_init('RabbitHoleReceipt', 'RHR');\\n        __ERC721URIStorage_init();\\n        __Ownable_init(owner_);\\n        royaltyRecipient = royaltyRecipient_;\\n        minterAddress = minterAddress_;\\n        royaltyFee = royaltyFee_;\\n        ReceiptRendererContract = ReceiptRenderer(receiptRenderer_);\\n    }\\n\\n    modifier onlyMinter() {\\n        require(msg.sender == minterAddress, 'Only minter');\\n        _;\\n    }\\n\\n    /// @dev set the receipt renderer contract\\n    /// @param receiptRenderer_ the address of the receipt renderer contract\\n    function setReceiptRenderer(address receiptRenderer_) external onlyOwner {\\n        ReceiptRendererContract = ReceiptRenderer(receiptRenderer_);\\n    }\\n\\n    /// @dev set the royalty recipient\\n    /// @param royaltyRecipient_ the address of the royalty recipient\\n    function setRoyaltyRecipient(address royaltyRecipient_) external onlyOwner {\\n        royaltyRecipient = royaltyRecipient_;\\n    }\\n\\n    /// @dev set the quest factory contract\\n    /// @param questFactory_ the address of the quest factory contract\\n    function setQuestFactory(address questFactory_) external onlyOwner {\\n        QuestFactoryContract = IQuestFactory(questFactory_);\\n    }\\n\\n    /// @dev set the minter address\\n    /// @param minterAddress_ the address of the minter\\n    function setMinterAddress(address minterAddress_) external onlyOwner {\\n        minterAddress = minterAddress_;\\n        emit MinterAddressSet(minterAddress_);\\n    }\\n\\n    /// @dev set the royalty fee\\n    /// @param royaltyFee_ the royalty fee\\n    function setRoyaltyFee(uint256 royaltyFee_) external onlyOwner {\\n        royaltyFee = royaltyFee_;\\n        emit RoyaltyFeeSet(royaltyFee_);\\n    }\\n\\n    /// @dev mint a receipt\\n    /// @param to_ the address to mint to\\n    /// @param questId_ the quest id\\n    function mint(address to_, string memory questId_) external onlyMinter {\\n        _tokenIds.increment();\\n        uint newTokenID = _tokenIds.current();\\n        questIdForTokenId[newTokenID] = questId_;\\n        timestampForTokenId[newTokenID] = block.timestamp;\\n        _safeMint(to_, newTokenID);\\n    }\\n\\n    /// @dev get the token ids for a quest owned by an address\\n    /// @param questId_ the quest id\\n    /// @param claimingAddress_ the address claiming to own the tokens\\n    function getOwnedTokenIdsOfQuest(\\n        string memory questId_,\\n        address claimingAddress_\\n    ) external view returns (uint[] memory) {\\n        uint msgSenderBalance = balanceOf(claimingAddress_);\\n        uint[] memory tokenIdsForQuest = new uint[](msgSenderBalance);\\n        uint foundTokens = 0;\\n        bytes32 QUEST_ID = keccak256(bytes(questId_));\\n\\n        for (uint i = 0; i < msgSenderBalance; i++) {\\n            uint tokenId = tokenOfOwnerByIndex(claimingAddress_, i);\\n            if (keccak256(bytes(questIdForTokenId[tokenId])) == QUEST_ID) {\\n                tokenIdsForQuest[i] = tokenId;\\n                foundTokens++;\\n            }\\n        }\\n\\n        uint[] memory filteredTokens = new uint[](foundTokens);\\n        uint filterTokensIndexTracker = 0;\\n\\n        for (uint i = 0; i < msgSenderBalance; i++) {\\n            if (tokenIdsForQuest[i] > 0) {\\n                filteredTokens[filterTokensIndexTracker] = tokenIdsForQuest[i];\\n                filterTokensIndexTracker++;\\n            }\\n        }\\n        return filteredTokens;\\n    }\\n\\n    /// @dev burn a receipt\\n    /// @param tokenId_ the token id\\n    function _burn(uint256 tokenId_) internal override(ERC721Upgradeable, ERC721URIStorageUpgradeable) {\\n        super._burn(tokenId_);\\n    }\\n\\n    /// @dev before token transfer hook, called before any token transfer\\n    /// @param from_ the address from\\n    /// @param to_ the address to\\n    /// @param tokenId_ the token id\\n    /// @param batchSize_ the batch size\\n    function _beforeTokenTransfer(\\n        address from_,\\n        address to_,\\n        uint256 tokenId_,\\n        uint256 batchSize_\\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\n        super._beforeTokenTransfer(from_, to_, tokenId_, batchSize_);\\n    }\\n\\n    /// @dev return the token uri, this delegates to the receipt renderer contract\\n    function tokenURI(\\n        uint tokenId_\\n    ) public view virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable) returns (string memory) {\\n        require(_exists(tokenId_), 'ERC721URIStorage: URI query for nonexistent token');\\n        require(QuestFactoryContract != IQuestFactory(address(0)), 'QuestFactory not set');\\n\\n        string memory questId = questIdForTokenId[tokenId_];\\n        (address questAddress, uint totalParticipants, ) = QuestFactoryContract.questInfo(questId);\\n        IQuest questContract = IQuest(questAddress);\\n\\n        bool claimed = questContract.isClaimed(tokenId_);\\n        uint rewardAmount = questContract.getRewardAmount();\\n        address rewardAddress = questContract.getRewardToken();\\n\\n        return\\n            ReceiptRendererContract.generateTokenURI(\\n                tokenId_,\\n                questId,\\n                totalParticipants,\\n                claimed,\\n                rewardAmount,\\n                rewardAddress\\n            );\\n    }\\n\\n    /// @dev get the current token id\\n    function getTokenId() public view returns (uint) {\\n        return _tokenIds.current();\\n    }\\n\\n    /// @dev See {IERC165-royaltyInfo}\\n    /// @param tokenId_ the token id\\n    /// @param salePrice_ the sale price\\n    function royaltyInfo(\\n        uint256 tokenId_,\\n        uint256 salePrice_\\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\\n        require(_exists(tokenId_), 'Nonexistent token');\\n\\n        uint256 royaltyPayment = (salePrice_ * royaltyFee) / 10_000;\\n        return (royaltyRecipient, royaltyPayment);\\n    }\\n\\n    /// @dev returns true if the supplied interface id is supported\\n    /// @param interfaceId_ the interface id\\n    function supportsInterface(\\n        bytes4 interfaceId_\\n    ) public view virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId_ == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId_);\\n    }\\n}\\n\",\"keccak256\":\"0x78f020e21f496fac33248f7f52150da910c79985ac57336825cd6ae71d6346ed\",\"license\":\"MIT\"},\"contracts/ReceiptRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.16;\\n\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/// @title ReceiptRenderer\\n/// @author RabbitHole.gg\\n/// @dev This contract is used to render on-chain data for RabbitHole Receipts (ERC-721 standard)\\ncontract ReceiptRenderer {\\n    using Strings for uint256;\\n\\n    /// @dev generates the tokenURI for a given ERC-721 token ID\\n    /// @param tokenId_ The token id to generate the URI for\\n    /// @param questId_ The questId tied to the tokenId\\n    /// @param totalParticipants_ The total number of participants in the quest\\n    /// @param claimed_ Whether or not the token has been claimed\\n    /// @param rewardAmount_ The amount of reward tokens that the user is eligible for\\n    /// @param rewardAddress_ The address of the reward token\\n    /// @return encoded JSON following the generic OpenSea metadata standard\\n    function generateTokenURI(\\n        uint tokenId_,\\n        string memory questId_,\\n        uint totalParticipants_,\\n        bool claimed_,\\n        uint rewardAmount_,\\n        address rewardAddress_\\n    ) external view virtual returns (string memory) {\\n        bytes memory dataURI = generateDataURI(\\n            tokenId_,\\n            questId_,\\n            totalParticipants_,\\n            claimed_,\\n            rewardAmount_,\\n            rewardAddress_\\n        );\\n        return string(abi.encodePacked('data:application/json;base64,', Base64.encode(dataURI)));\\n    }\\n\\n    function generateDataURI(\\n        uint tokenId_,\\n        string memory questId_,\\n        uint totalParticipants_,\\n        bool claimed_,\\n        uint rewardAmount_,\\n        address rewardAddress_\\n    ) internal view virtual returns (bytes memory) {\\n        string memory tokenIdString = tokenId_.toString();\\n        string memory humanRewardAmountString = this.humanRewardAmount(rewardAmount_, rewardAddress_);\\n        string memory rewardTokenSymbol = this.symbolForAddress(rewardAddress_);\\n\\n        bytes memory attributes = abi.encodePacked(\\n            '[',\\n            generateAttribute('Quest ID', questId_),\\n            ',',\\n            generateAttribute('Token ID', tokenIdString),\\n            ',',\\n            generateAttribute('Total Participants', totalParticipants_.toString()),\\n            ',',\\n            generateAttribute('Claimed', claimed_ ? 'true' : 'false'),\\n            ',',\\n            generateAttribute('Reward Amount', humanRewardAmountString),\\n            ',',\\n            generateAttribute('Reward Address', Strings.toHexString(uint160(rewardAddress_), 20)),\\n            ']'\\n        );\\n        bytes memory dataURI = abi.encodePacked(\\n            '{',\\n            '\\\"name\\\": \\\"RabbitHole.gg Receipt #',\\n            tokenIdString,\\n            '\\\",',\\n            '\\\"description\\\": \\\"RabbitHole.gg Receipts are used to claim rewards from completed quests.\\\",',\\n            '\\\"image\\\": \\\"',\\n            generateSVG(claimed_, questId_, humanRewardAmountString, rewardTokenSymbol),\\n            '\\\",',\\n            '\\\"attributes\\\": ',\\n            attributes,\\n            '}'\\n        );\\n        return dataURI;\\n    }\\n\\n    /// @dev generates an attribute object for an ERC-721 token\\n    /// @param key The key for the attribute\\n    /// @param value The value for the attribute\\n    function generateAttribute(string memory key, string memory value) internal pure returns (string memory) {\\n        bytes memory attribute = abi.encodePacked(\\n            '{',\\n            '\\\"trait_type\\\": \\\"',\\n            key,\\n            '\\\",',\\n            '\\\"value\\\": \\\"',\\n            value,\\n            '\\\"',\\n            '}'\\n        );\\n        return string(attribute);\\n    }\\n\\n    /// @dev generates the on-chain SVG for an ERC-721 token ID\\n    /// @param claimed_ Whether or not the token has been claimed\\n    /// @param questId_ The questId tied to the tokenId\\n    /// @param rewardAmountString_ The string decimal of reward tokens that the user is eligible for\\n    /// @param rewardTokenSymbol_ The symbol of the reward token\\n    /// @return base64 encoded SVG image\\n    function generateSVG(bool claimed_, string memory questId_, string memory rewardAmountString_, string memory rewardTokenSymbol_) internal view returns (string memory) {\\n        bytes memory svg = abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"648\\\" height=\\\"889\\\" fill=\\\"none\\\">',\\n            '<style><![CDATA[.B{fill-rule:evenodd}.C{color-interpolation-filters:sRGB}.D{flood-opacity:0}.E{fill-opacity:.5}.F{stroke:#ad86ff}.G{stroke-width:2}.H{fill:#dae0ff}.I{font-family:Arial}.J{text-anchor:middle}.K{shape-rendering:crispEdges}.L{dominant-baseline:middle}]]></style><g filter=\\\"url(#B)\\\"><path d=\\\"M91.731 44.195c-25.957 0-47 21.043-47 47v114c0 25.958 21.043 47 47 47H220.23v384H91.731c-25.957 0-47 21.043-47 47v114c0 25.958 21.043 47 47 47h465c25.958 0 47-21.042 47-47v-114c0-25.957-21.042-47-47-47h-128.5v-384h128.5c25.958 0 47-21.042 47-47v-114c0-25.957-21.042-47-47-47H91.731z\\\" fill=\\\"#0f0f16\\\" class=\\\"B\\\"/><path d=\\\"M220.73 252.195v-.5h-.5H91.731c-25.681 0-46.5-20.818-46.5-46.5v-114c0-25.681 20.819-46.5 46.5-46.5h465c25.682 0 46.5 20.819 46.5 46.5v114c0 25.682-20.818 46.5-46.5 46.5h-128.5-.5v.5 384 .5h.5 128.5c25.682 0 46.5 20.819 46.5 46.5v114c0 25.682-20.818 46.5-46.5 46.5H91.731c-25.681 0-46.5-20.818-46.5-46.5v-114c0-25.681 20.819-46.5 46.5-46.5H220.23h.5v-.5-384z\\\" stroke=\\\"#232854\\\"/></g><mask id=\\\"A\\\" fill=\\\"#fff\\\"><path d=\\\"M44.731 91.195c0-25.957 21.043-47 47-47h465c25.958 0 47 21.043 47 47v114c0 21.448-14.365 39.54-34 45.179v387.642c19.635 5.64 34 23.732 34 45.179v114c0 25.958-21.042 47-47 47H91.731c-25.957 0-47-21.042-47-47v-114c0-21.81 14.856-40.15 35-45.454V250.65c-20.145-5.304-35-23.645-35-45.455v-114z\\\" class=\\\"B\\\"/></mask><path d=\\\"M569.73 250.374l-.276-.961-.724.208v.753h1zm0 387.642h-1v.754l.724.207.276-.961zm-489.999-.275l.255.967.745-.196v-.771h-1zm0-387.091h1v-.771l-.745-.197-.255.968zm12-207.455c-26.51 0-48 21.49-48 48h2c0-25.405 20.595-46 46-46v-2zm465 0H91.731v2h465v-2zm48 48c0-26.51-21.49-48-48-48v2c25.406 0 46 20.595 46 46h2zm0 114v-114h-2v114h2zm-34.723 46.14c20.051-5.759 34.723-24.234 34.723-46.14h-2c0 20.99-14.059 38.699-33.276 44.218l.553 1.922zm.723 386.681V250.374h-2v387.642h2zm34 45.179c0-21.905-14.672-40.381-34.723-46.14l-.553 1.922c19.217 5.52 33.276 23.229 33.276 44.218h2zm0 114v-114h-2v114h2zm-48 48c26.51 0 48-21.49 48-48h-2c0 25.405-20.594 46-46 46v2zm-464.999 0h465v-2H91.731v2zm-48-48c0 26.51 21.49 48 48 48v-2c-25.405 0-46-20.595-46-46h-2zm0-114v114h2v-114h-2zm35.745-46.421c-20.573 5.417-35.745 24.146-35.745 46.421h2c0-21.344 14.539-39.296 34.255-44.487l-.509-1.934zm-.745-386.124v387.091h2V250.65h-2zm-35-45.455c0 22.276 15.173 41.005 35.745 46.422l.509-1.935c-19.716-5.191-34.255-23.142-34.255-44.487h-2zm0-114v114h2v-114h-2z\\\" fill=\\\"#232854\\\" mask=\\\"url(#A)\\\"/><g filter=\\\"url(#C)\\\" class=\\\"B K\\\"><use xlink:href=\\\"#M\\\" fill=\\\"#000\\\" fill-opacity=\\\".01\\\"/></g><use xlink:href=\\\"#M\\\" fill=\\\"#0c0b0f\\\" fill-opacity=\\\".26\\\" class=\\\"B\\\"/><g style=\\\"mix-blend-mode:color-dodge\\\" filter=\\\"url(#D)\\\" class=\\\"B K\\\"><use xlink:href=\\\"#M\\\" fill=\\\"url(#H)\\\" fill-opacity=\\\".99\\\"/></g><use xlink:href=\\\"#N\\\" fill=\\\"url(#I)\\\" style=\\\"mix-blend-mode:color-dodge\\\" class=\\\"E\\\"/><use xlink:href=\\\"#N\\\" fill=\\\"url(#J)\\\" style=\\\"mix-blend-mode:color-dodge\\\" class=\\\"E\\\"/><use xlink:href=\\\"#N\\\" fill=\\\"url(#K)\\\" style=\\\"mix-blend-mode:color-dodge\\\" class=\\\"E\\\"/><use xlink:href=\\\"#N\\\" fill=\\\"url(#L)\\\" style=\\\"mix-blend-mode:color-dodge\\\" class=\\\"E\\\"/><use xlink:href=\\\"#N\\\" class=\\\"F G\\\"/><path d=\\\"M81.425 695.195H569.27v58.5l-35.76 37.131-452.085.369v-96z\\\" fill=\\\"#ad86ff\\\"/><path d=\\\"M325.231 315.009l-.001-236.802m-7.5 236.265V95.892l-18.5-18.697m33.5 237.277V95.892l18.5-18.697m-40.5 237.545V99.43l-22-22.234m52 237.277V99.43l22-22.234m-36.5 331.666l-.001 170.565m7.501-170.565v152.88l18.5 18.697m-33.5-171.577v152.88l-18.5 18.697m40.5-171.242v149.007l22 22.235m-52-171.775v149.54l-22 22.235m-66.683-266.243H422.67l29.6 47.5-29.6 47.5H222.047l-28.777-47.5 28.777-47.5zm.223 297.5c0-17.397 14.103-31.5 31.5-31.5h140c17.397 0 31.5 14.103 31.5 31.5s-14.103 31.5-31.5 31.5h-140c-17.397 0-31.5-14.103-31.5-31.5zm102 83.499v95m-245-96h488\\\" class=\\\"F G\\\"/><path d=\\\"M508.022 178.34c10.803-4.323 18.45-15.029 18.45-27.55 0-16.345-13.029-29.595-29.101-29.595s-29.101 13.25-29.101 29.595c0 10.385 5.259 19.52 13.217 24.802.566-1.02 1.612-1.705 2.809-1.705.265 0 .488-.247.422-.504a20.47 20.47 0 0 1-.644-5.115c0-10.652 8.105-19.287 18.104-19.287.687 0 1.293-.463 1.522-1.111l.058-.158c.471-1.26-.314-3.043-1.625-3.345-6.7-1.545-12.016-7.022-13.688-14.036-.192-.805.714-1.341 1.373-.839l26.416 20.097c.287.218.421.583.358.939-.181 1.021-.276 2.075-.276 3.152 0 1.334.146 2.633.42 3.878.079.361-.043.742-.348.951a8.24 8.24 0 0 1-4.662 1.447c-1.397 0-2.716-.351-3.88-.973-.344-.184-.74-.255-1.119-.165-.652.155-1.112.738-1.112 1.408v12.169c0 .516-.418.934-.934.934h-1.506c-.504 0-.912-.4-.978-.899-.56-4.229-3.973-7.483-8.101-7.483-.262 0-.521.013-.777.039-.304.03-.524.294-.524.6 0 .335.264.607.596.653 3.399.471 6.024 3.553 6.024 7.285a7.83 7.83 0 0 1-.137 1.464c-.101.527.278 1.059.815 1.059h.762a.02.02 0 0 1 .02.02.02.02 0 0 0 .02.02h5.894c.065 0 .128.025.174.071h0a15.52 15.52 0 0 1 .509.52c.35.38.492.915.55 1.662zm-27.419-31.65c-.488-.389-.193-1.126.431-1.126h16.626c.624 0 .919.737.431 1.126-2.436 1.94-5.463 3.089-8.744 3.089s-6.309-1.149-8.744-3.089zm31.5 5.303c0 .922-.705 1.669-1.575 1.669s-1.575-.747-1.575-1.669.705-1.669 1.575-1.669 1.575.748 1.575 1.669z\\\" class=\\\"B H\\\"/>',\\n            this.generateTextFields(claimed_, questId_, rewardAmountString_, rewardTokenSymbol_),\\n            '<g class=\\\"F G\\\"><use xlink:href=\\\"#O\\\"/><use xlink:href=\\\"#O\\\" x=\\\"-353\\\"/><use xlink:href=\\\"#O\\\" y=\\\"256\\\"/><use xlink:href=\\\"#O\\\" x=\\\"-353\\\" y=\\\"256\\\"/></g><defs><filter id=\\\"B\\\" x=\\\".73\\\" y=\\\".195\\\" width=\\\"647\\\" height=\\\"888\\\" filterUnits=\\\"userSpaceOnUse\\\" class=\\\"C\\\"><feFlood class=\\\"D\\\"/><feBlend in=\\\"SourceGraphic\\\"/><feGaussianBlur stdDeviation=\\\"22\\\"/></filter><filter id=\\\"C\\\" x=\\\"13.816\\\" y=\\\"10.195\\\" width=\\\"622\\\" height=\\\"847\\\" filterUnits=\\\"userSpaceOnUse\\\" class=\\\"C\\\"><feFlood result=\\\"A\\\" class=\\\"D\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"1\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0.756 0 0 0 0 0.2375 0 0 0 0 1 0 0 0 1 0\\\"/><feBlend in2=\\\"A\\\" result=\\\"C\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"33\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0.6095 0 0 0 0 0.1125 0 0 0 0 1 0 0 0 0.83 0\\\"/><feBlend in2=\\\"C\\\"/><feBlend in=\\\"SourceGraphic\\\" result=\\\"E\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"1\\\"/><feComposite in2=\\\"B\\\" operator=\\\"arithmetic\\\" k2=\\\"-1\\\" k3=\\\"1\\\"/><feColorMatrix values=\\\"0 0 0 0 0.63 0 0 0 0 0.5375 0 0 0 0 1 0 0 0 1 0\\\"/><feBlend in2=\\\"E\\\"/></filter><filter id=\\\"D\\\" x=\\\"75.816\\\" y=\\\"76.195\\\" width=\\\"498\\\" height=\\\"723\\\" filterUnits=\\\"userSpaceOnUse\\\" class=\\\"C\\\"><feFlood result=\\\"A\\\" class=\\\"D\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset dy=\\\"4\\\"/><feGaussianBlur stdDeviation=\\\"2\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\\\"/><feBlend in2=\\\"A\\\"/><feBlend in=\\\"SourceGraphic\\\"/></filter><filter id=\\\"E\\\" y=\\\"675.584\\\" height=\\\"136.611\\\" filterUnits=\\\"userSpaceOnUse\\\" x=\\\"100\\\" width=\\\"450\\\" class=\\\"C\\\"><feFlood result=\\\"A\\\" class=\\\"D\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"1.5\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0.966867 0 0 0 0 0.585833 0 0 0 0 1 0 0 0 0.87 0\\\"/><feBlend in2=\\\"A\\\" result=\\\"C\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"29.5\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0.624167 0 0 0 0 0.145833 0 0 0 0 1 0 0 0 0.91 0\\\"/><feBlend in2=\\\"C\\\"/><feBlend in=\\\"SourceGraphic\\\"/></filter><filter id=\\\"F\\\" x=\\\"203.166\\\" y=\\\"543.389\\\" width=\\\"243.62\\\" height=\\\"136.916\\\" filterUnits=\\\"userSpaceOnUse\\\" class=\\\"C\\\"><feFlood result=\\\"A\\\" class=\\\"D\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"1.5\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0.966867 0 0 0 0 0.585833 0 0 0 0 1 0 0 0 0.87 0\\\"/><feBlend in2=\\\"A\\\" result=\\\"C\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"29.5\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0.624167 0 0 0 0 0.145833 0 0 0 0 1 0 0 0 0.91 0\\\"/><feBlend in2=\\\"C\\\"/><feBlend in=\\\"SourceGraphic\\\"/></filter><filter id=\\\"G\\\" x=\\\"196.876\\\" y=\\\"290.619\\\" width=\\\"247.7\\\" height=\\\"147.062\\\" filterUnits=\\\"userSpaceOnUse\\\" class=\\\"C\\\"><feFlood result=\\\"A\\\" class=\\\"D\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"1.5\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0.966867 0 0 0 0 0.585833 0 0 0 0 1 0 0 0 0.87 0\\\"/><feBlend in2=\\\"A\\\" result=\\\"C\\\"/><feColorMatrix in=\\\"SourceAlpha\\\" values=\\\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\\\" result=\\\"B\\\"/><feOffset/><feGaussianBlur stdDeviation=\\\"29.5\\\"/><feComposite in2=\\\"B\\\" operator=\\\"out\\\"/><feColorMatrix values=\\\"0 0 0 0 0.624167 0 0 0 0 0.145833 0 0 0 0 1 0 0 0 0.91 0\\\"/><feBlend in2=\\\"C\\\"/><feBlend in=\\\"SourceGraphic\\\"/></filter><radialGradient id=\\\"H\\\" cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(784.184,0,0,761.17,325.816,380.195)\\\" xlink:href=\\\"#P\\\"><stop offset=\\\".01\\\" stop-color=\\\"#bd00ff\\\" stop-opacity=\\\".39\\\"/><stop offset=\\\".135\\\" stop-color=\\\"#ec7bff\\\" stop-opacity=\\\".22\\\"/><stop offset=\\\".271\\\" stop-color=\\\"#f25aff\\\" stop-opacity=\\\".48\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#010039\\\" stop-opacity=\\\".69\\\"/></radialGradient><radialGradient id=\\\"I\\\" cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"1\\\" gradientTransform=\\\"translate(320.316 57.1953) rotate(88.6238) scale(333.096 579.761)\\\" xlink:href=\\\"#P\\\"><stop stop-color=\\\"#8f00ff\\\" stop-opacity=\\\".51\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/><stop offset=\\\"1\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient id=\\\"J\\\" cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(2.112515728529184e-14,-345,877.774,5.3748155973738444e-14,327.816,815.695)\\\" xlink:href=\\\"#P\\\"><stop stop-color=\\\"#c13fff\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#c00dff\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient id=\\\"K\\\" cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(267.9995372733712,-2.0000175646580165,8.572090192313523,1148.648014698034,64.3164,384.195)\\\" xlink:href=\\\"#P\\\"><stop stop-color=\\\"#b946ff\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#860dff\\\" stop-opacity=\\\"0\\\"/></radialGradient><radialGradient id=\\\"L\\\" cx=\\\"0\\\" cy=\\\"0\\\" r=\\\"1\\\" gradientTransform=\\\"matrix(-242,2.963645253936595e-14,-1.5644005606348036e-13,-1277.43,574.316,382.195)\\\" xlink:href=\\\"#P\\\"><stop stop-color=\\\"#dd0fff\\\" stop-opacity=\\\".91\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#1c231b\\\" stop-opacity=\\\"0\\\"/><stop offset=\\\"1\\\" stop-color=\\\"#a30dff\\\" stop-opacity=\\\"0\\\"/></radialGradient><path id=\\\"M\\\" d=\\\"M413.387 76.195H239.246c-2.264 9.741-10.999 17-21.43 17h-39c-10.43 0-19.165-7.259-21.429-17h-43.979l-33.592 33.592v681.408h453.501l36.499-36.5v-641l-37.5-37.5h-37.07c-2.264 9.741-10.999 17-21.43 17h-39c-10.43 0-19.165-7.259-21.429-17z\\\"/><path id=\\\"N\\\" d=\\\"M217.816 94.195c10.628 0 19.57-7.207 22.21-17h172.581c2.64 9.793 11.582 17 22.209 17h39c10.628 0 19.57-7.207 22.21-17h35.876l36.914 36.915v640.171l-35.914 35.914H80.816V110.201l33.006-33.006h42.785c2.64 9.793 11.582 17 22.209 17h39z\\\"/><path id=\\\"O\\\" d=\\\"M499 351v12m0 0v12m0-12h-12m12 0h12m-12 7a7 7 0 1 1 0-14 7 7 0 1 1 0 14z\\\"/><linearGradient id=\\\"P\\\" gradientUnits=\\\"userSpaceOnUse\\\"/></defs>',\\n            '</svg>'\\n        );\\n        return string(abi.encodePacked('data:image/svg+xml;base64,', Base64.encode(svg)));\\n    }\\n\\n    /// @dev generates the SVG parts that include the text fields\\n    /// @param claimed_ Whether or not the token has been claimed\\n    /// @param questId_ The questId tied to the tokenId\\n    /// @param rewardAmountString_ The string decimal of reward tokens that the user is eligible for\\n    /// @param rewardTokenSymbol_ The symbol of the reward token\\n    /// @return SVG parts that include the text fields\\n    function generateTextFields(bool claimed_, string memory questId_, string memory rewardAmountString_, string memory rewardTokenSymbol_) external pure returns (string memory) {\\n        bytes memory text = abi.encodePacked(\\n            '<g filter=\\\"url(#E)\\\" class=\\\"I\\\"><text fill=\\\"#0f0f16\\\" xml:space=\\\"preserve\\\" style=\\\"white-space:pre\\\" font-size=\\\"26\\\" font-weight=\\\"bold\\\" letter-spacing=\\\"0.07em\\\"><tspan y=\\\"750\\\" x=\\\"325\\\" class=\\\"J\\\">',\\n            claimed_ ? 'CLAIMED' : 'REDEEMABLE',\\n            '</tspan></text></g>',\\n            '<g filter=\\\"url(#F)\\\" class=\\\"H I J L\\\"><text font-size=\\\"26\\\" letter-spacing=\\\"0em\\\" x=\\\"50%\\\" y=\\\"615\\\"><tspan>RabbitHole</tspan></text></g>',\\n            '<g filter=\\\"url(#G)\\\" class=\\\"H I J L\\\"><text font-size=\\\"39.758\\\" letter-spacing=\\\"0.05em\\\" x=\\\"50%\\\" y=\\\"365\\\">',\\n            abi.encodePacked(rewardAmountString_, ' ', rewardTokenSymbol_),\\n            '</text></g>'\\n        );\\n\\n        return string(text);\\n    }\\n\\n    /// @dev Returns a human readable reward amount\\n    /// @param rewardAmount_ The reward amount\\n    /// @param rewardAddress_ The reward address\\n    function humanRewardAmount(uint rewardAmount_, address rewardAddress_) external view returns (string memory) {\\n        uint8 decimals;\\n\\n        if (rewardAddress_ == address(0)) {\\n            decimals = 18;\\n        } else {\\n            decimals = ERC20(rewardAddress_).decimals();\\n        }\\n\\n        return decimalString(rewardAmount_, decimals, false);\\n    }\\n\\n    /// @dev Returns the symbol for a token address\\n    /// @param tokenAddress_ The reward address\\n    function symbolForAddress(address tokenAddress_) external view returns (string memory) {\\n        string memory symbol;\\n\\n        if (tokenAddress_ == address(0)) {\\n            symbol = 'ETH';\\n        } else {\\n            symbol = ERC20(tokenAddress_).symbol();\\n        }\\n\\n        return symbol;\\n    }\\n\\n    /// @notice From https://gist.github.com/wilsoncusack/d2e680e0f961e36393d1bf0b6faafba7\\n    struct DecimalStringParams {\\n        // significant figures of decimal\\n        uint256 sigfigs;\\n        // length of decimal string\\n        uint8 bufferLength;\\n        // ending index for significant figures (funtion works backwards when copying sigfigs)\\n        uint8 sigfigIndex;\\n        // index of decimal place (0 if no decimal)\\n        uint8 decimalIndex;\\n        // start index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosStartIndex;\\n        // end index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosEndIndex;\\n        // true if decimal number is less than one\\n        bool isLessThanOne;\\n        // true if string should include \\\"%\\\"\\n        bool isPercent;\\n    }\\n\\n    function decimalString(uint256 number, uint8 decimals, bool isPercent) internal pure returns (string memory){\\n        uint8 percentBufferOffset = isPercent ? 1 : 0;\\n        uint256 tenPowDecimals = 10 ** decimals;\\n        uint256 temp = number;\\n        uint8 digits;\\n        uint8 numSigfigs;\\n        while (temp != 0) {\\n            if (numSigfigs > 0) {\\n                // count all digits preceding least significant figure\\n                numSigfigs++;\\n            } else if (temp % 10 != 0) {\\n                numSigfigs++;\\n            }\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        DecimalStringParams memory params;\\n        params.isPercent = isPercent;\\n        if ((digits - numSigfigs) >= decimals) {\\n            // no decimals, ensure we preserve all trailing zeros\\n            params.sigfigs = number / tenPowDecimals;\\n            params.sigfigIndex = digits - decimals;\\n            params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        } else {\\n            // chop all trailing zeros for numbers with decimals\\n            params.sigfigs = number / (10 ** (digits - numSigfigs));\\n            if (tenPowDecimals > number) {\\n                // number is less tahn one\\n                // in this case, there may be leading zeros after the decimal place\\n                // that need to be added\\n\\n                // offset leading zeros by two to account for leading '0.'\\n                params.zerosStartIndex = 2;\\n                params.zerosEndIndex = decimals - digits + 2;\\n                params.sigfigIndex = numSigfigs + params.zerosEndIndex;\\n                params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n                params.isLessThanOne = true;\\n            } else {\\n                // In this case, there are digits before and\\n                // after the decimal place\\n                params.sigfigIndex = numSigfigs + 1;\\n                params.decimalIndex = digits - decimals + 1;\\n            }\\n        }\\n        params.bufferLength = params.sigfigIndex + percentBufferOffset;\\n        return generateDecimalString(params);\\n    }\\n\\n    function generateDecimalString(DecimalStringParams memory params) private pure returns (string memory) {\\n        bytes memory buffer = new bytes(params.bufferLength);\\n        if (params.isPercent) {\\n            buffer[buffer.length - 1] = '%';\\n        }\\n        if (params.isLessThanOne) {\\n            buffer[0] = '0';\\n            buffer[1] = '.';\\n        }\\n\\n        // add leading/trailing 0's\\n        for (uint256 zerosCursor = params.zerosStartIndex; zerosCursor < params.zerosEndIndex; zerosCursor++) {\\n            buffer[zerosCursor] = bytes1(uint8(48));\\n        }\\n        // add sigfigs\\n        while (params.sigfigs > 0) {\\n            if (params.decimalIndex > 0 && params.sigfigIndex == params.decimalIndex) {\\n                buffer[--params.sigfigIndex] = '.';\\n            }\\n            buffer[--params.sigfigIndex] = bytes1(uint8(uint256(48) + (params.sigfigs % 10)));\\n            params.sigfigs /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\",\"keccak256\":\"0x5a3c69e719fcd59ed05fd928a63bec1fae6432f3765c005054435d2e74aec7f6\",\"license\":\"MIT\"},\"contracts/interfaces/IQuest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.16;\\n\\n// TODO clean this whole thing up\\n// Allows anyone to claim a token if they exist in a merkle root.\\ninterface IQuest {\\n    // This event is triggered whenever a call to #claim succeeds.\\n    event Claimed(address indexed account, address rewardAddress, uint256 amount);\\n    event Queued(uint timestamp);\\n\\n    error AlreadyClaimed();\\n    error NoTokensToClaim();\\n    error EndTimeInPast();\\n    error StartTimeInPast();\\n    error EndTimeLessThanOrEqualToStartTime();\\n    error ClaimWindowNotStarted();\\n    error NoWithdrawDuringClaim();\\n    error TotalAmountExceedsBalance();\\n    error AmountExceedsBalance();\\n    error NotStarted();\\n    error MustImplementInChild();\\n\\n    function isClaimed(uint256 tokenId_) external view returns (bool);\\n\\n    function getRewardAmount() external view returns (uint256);\\n\\n    function getRewardToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xecbaaef4f9b21d9dd7f0f92be78967efba4e834dad08ab515f902b1e6f39e890\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IQuestFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.16;\\n\\ninterface IQuestFactory {\\n    error QuestIdUsed();\\n    error OverMaxAllowedToMint();\\n    error AddressNotSigned();\\n    error AddressAlreadyMinted();\\n    error InvalidHash();\\n    error OnlyOwnerCanCreate1155Quest();\\n    error RewardNotAllowed();\\n    error QuestTypeInvalid();\\n    error AddressZeroNotAllowed();\\n    error QuestFeeTooHigh();\\n    error QuestNotQueued();\\n    error QuestNotStarted();\\n    error QuestEnded();\\n\\n    event QuestCreated(\\n        address indexed creator,\\n        address indexed contractAddress,\\n        string questId,\\n        string contractType,\\n        address rewardTokenAddress,\\n        uint256 endTime,\\n        uint256 startTime,\\n        uint256 totalParticipants,\\n        uint256 rewardAmountOrTokenId\\n    );\\n    event ReceiptMinted(address indexed recipient, address indexed questAddress, uint indexed tokenId, string questId);\\n\\n    function questInfo(string memory questId_) external view returns (address, uint, uint);\\n}\\n\",\"keccak256\":\"0xc6b54337923c5e816330c650876b2f831bd8b6d2d0d0f2ba087b775a782d422a\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61319880620000f46000396000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c80634f6ccce711610145578063a3106b95116100bd578063b8d1ebfd1161008c578063d0def52111610071578063d0def5211461051a578063e985e9c51461052d578063f2fde38b1461056957600080fd5b8063b8d1ebfd146104e7578063c87b56dd1461050757600080fd5b8063a3106b95146104a3578063a7866a83146104b6578063b88d4fde146104ca578063b8997a97146104dd57600080fd5b8063715018a6116101145780638da5cb5b116100f95780638da5cb5b1461047757806395d89b4114610488578063a22cb4651461049057600080fd5b8063715018a61461045b57806377293cc31461046357600080fd5b80634f6ccce71461040f578063530b97a4146104225780636352211e1461043557806370a082311461044857600080fd5b806328cf1635116101d85780633c3091a1116101a757806341e42f301161018c57806341e42f30146103d557806342842e0e146103e85780634c00de82146103fb57600080fd5b80633c3091a1146103af5780633e4086e5146103c257600080fd5b806328cf1635146103355780632a55205a146103565780632f745c591461038857806334d722c91461039b57600080fd5b8063095ea7b31161022f5780631c9fd0c3116102145780631c9fd0c3146102fc57806323b872dd1461030f57806327125e2f1461032257600080fd5b8063095ea7b3146102df57806318160ddd146102f457600080fd5b8063010a38f51461026157806301ffc9a71461027c57806306fdde031461029f578063081812fc146102b4575b600080fd5b61026961057c565b6040519081526020015b60405180910390f35b61028f61028a36600461284c565b61058d565b6040519015158152602001610273565b6102a76105e9565b60405161027391906128c0565b6102c76102c23660046128d3565b61067b565b6040516001600160a01b039091168152602001610273565b6102f26102ed366004612901565b6106a2565b005b609954610269565b6102f261030a36600461292d565b6107d8565b6102f261031d36600461294a565b610810565b6102a76103303660046128d3565b610897565b6102696103433660046128d3565b6101326020526000908152604090205481565b61036961036436600461298b565b610932565b604080516001600160a01b039093168352602083019190915201610273565b610269610396366004612901565b6109ce565b610130546102c7906001600160a01b031681565b6102f26103bd36600461292d565b610a76565b6102f26103d03660046128d3565b610aae565b6102f26103e336600461292d565b610aea565b6102f26103f636600461294a565b610b22565b61012f546102c7906001600160a01b031681565b61026961041d3660046128d3565b610b3d565b6102f26104303660046129ad565b610be1565b6102c76104433660046128d3565b610e10565b61026961045636600461292d565b610e75565b6102f2610f0f565b610133546102c7906001600160a01b031681565b60fb546001600160a01b03166102c7565b6102a7610f23565b6102f261049e366004612a23565b610f32565b6102f26104b136600461292d565b610f41565b610134546102c7906001600160a01b031681565b6102f26104d8366004612b22565b610fa1565b6102696101315481565b6104fa6104f5366004612bc2565b61102f565b6040516102739190612c09565b6102a76105153660046128d3565b6111f1565b6102f2610528366004612c4d565b611602565b61028f61053b366004612c9d565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6102f261057736600461292d565b6116b1565b600061058861012d5490565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a0000000000000000000000000000000000000000000000000000000014806105e357506105e382611741565b92915050565b6060606580546105f890612ccb565b80601f016020809104026020016040519081016040528092919081815260200182805461062490612ccb565b80156106715780601f1061064657610100808354040283529160200191610671565b820191906000526020600020905b81548152906001019060200180831161065457829003601f168201915b5050505050905090565b600061068682611797565b506000908152606960205260409020546001600160a01b031690565b60006106ad82610e10565b9050806001600160a01b0316836001600160a01b03160361073b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107575750610757813361053b565b6107c95760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610732565b6107d383836117fb565b505050565b6107e0611876565b610134805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61081a33826118d0565b61088c5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610732565b6107d383838361194f565b61012e60205260009081526040902080546108b190612ccb565b80601f01602080910402602001604051908101604052809291908181526020018280546108dd90612ccb565b801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60008281526067602052604081205481906001600160a01b03166109985760405162461bcd60e51b815260206004820152601160248201527f4e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006044820152606401610732565b600061271061013154856109ac9190612d4d565b6109b69190612d6c565b61012f546001600160a01b0316969095509350505050565b60006109d983610e75565b8210610a4d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610732565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b610a7e611876565b610133805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610ab6611876565b61013181905560405181907fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c90600090a250565b610af2611876565b61012f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6107d383838360405180602001604052806000815250610fa1565b6000610b4860995490565b8210610bbc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610732565b60998281548110610bcf57610bcf612da7565b90600052602060002001549050919050565b600054610100900460ff1615808015610c015750600054600160ff909116105b80610c1b5750303b158015610c1b575060005460ff166001145b610c8d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610732565b6000805460ff191660011790558015610ccd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610d416040518060400160405280601181526020017f526162626974486f6c65526563656970740000000000000000000000000000008152506040518060400160405280600381526020017f5248520000000000000000000000000000000000000000000000000000000000815250611b92565b610d49611c19565b610d5282611c96565b61012f80546001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff199283161790925561013080548784169083161790556101318590556101338054928916929091169190911790558015610e0857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6000818152606760205260408120546001600160a01b0316806105e35760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610732565b60006001600160a01b038216610ef35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610732565b506001600160a01b031660009081526068602052604090205490565b610f17611876565b610f216000611d1c565b565b6060606680546105f890612ccb565b610f3d338383611d7b565b5050565b610f49611876565b610130805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f09e32743122b4d02dc06c38a35ee1587a02854644d47574bb35a6ef75a22fa9890600090a250565b610fab33836118d0565b61101d5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610732565b61102984848484611e49565b50505050565b6060600061103c83610e75565b905060008167ffffffffffffffff81111561105957611059612a5c565b604051908082528060200260200182016040528015611082578160200160208202803683370190505b5085516020870120909150600090815b848110156111165760006110a688836109ce565b90508261012e60008381526020019081526020016000206040516110ca9190612dd6565b60405180910390200361110357808583815181106110ea576110ea612da7565b6020908102919091010152836110ff81612e4c565b9450505b508061110e81612e4c565b915050611092565b5060008267ffffffffffffffff81111561113257611132612a5c565b60405190808252806020026020018201604052801561115b578160200160208202803683370190505b5090506000805b868110156111e357600086828151811061117e5761117e612da7565b602002602001015111156111d15785818151811061119e5761119e612da7565b60200260200101518383815181106111b8576111b8612da7565b6020908102919091010152816111cd81612e4c565b9250505b806111db81612e4c565b915050611162565b509098975050505050505050565b6000818152606760205260409020546060906001600160a01b031661127e5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608401610732565b610134546001600160a01b03166112d75760405162461bcd60e51b815260206004820152601460248201527f5175657374466163746f7279206e6f74207365740000000000000000000000006044820152606401610732565b600082815261012e6020526040812080546112f190612ccb565b80601f016020809104026020016040519081016040528092919081815260200182805461131d90612ccb565b801561136a5780601f1061133f5761010080835404028352916020019161136a565b820191906000526020600020905b81548152906001019060200180831161134d57829003601f168201915b5050610134546040517fec461ac40000000000000000000000000000000000000000000000000000000081529495506000948594506001600160a01b03909116925063ec461ac491506113c19086906004016128c0565b606060405180830381865afa1580156113de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114029190612e66565b506040517f9e34070f00000000000000000000000000000000000000000000000000000000815260048101889052919350915082906000906001600160a01b03831690639e34070f90602401602060405180830381865afa15801561146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148f9190612e9d565b90506000826001600160a01b03166309a69f576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190612eba565b90506000836001600160a01b03166369940d796040518163ffffffff1660e01b8152600401602060405180830381865afa158015611537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155b9190612ed3565b610133546040517fac1733830000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063ac173383906115b0908c908b908a90899089908990600401612ef0565b600060405180830381865afa1580156115cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115f59190810190612f37565b9998505050505050505050565b610130546001600160a01b0316331461165d5760405162461bcd60e51b815260206004820152600b60248201527f4f6e6c79206d696e7465720000000000000000000000000000000000000000006044820152606401610732565b61166c61012d80546001019055565b600061167861012d5490565b600081815261012e602052604090209091506116948382612ff4565b506000818152610132602052604090204290556107d38382611ed2565b6116b9611876565b6001600160a01b0381166117355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610732565b61173e81611d1c565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806105e357506105e382611eec565b6000818152606760205260409020546001600160a01b031661173e5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610732565b6000818152606960205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061183d82610e10565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60fb546001600160a01b03163314610f215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610732565b6000806118dc83610e10565b9050806001600160a01b0316846001600160a01b0316148061192357506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806119475750836001600160a01b031661193c8461067b565b6001600160a01b0316145b949350505050565b826001600160a01b031661196282610e10565b6001600160a01b0316146119de5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610732565b6001600160a01b038216611a595760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610732565b611a668383836001611fcf565b826001600160a01b0316611a7982610e10565b6001600160a01b031614611af55760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610732565b6000818152606960209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff16611c0f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b610f3d8282611fdb565b600054610100900460ff16610f215760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b600054610100900460ff16611d135760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b61173e81612071565b60fb80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603611ddc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610732565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e5484848461194f565b611e60848484846120ee565b6110295760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610732565b610f3d82826040518060200160405280600081525061228f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611f7f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806105e357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105e3565b61102984848484612318565b600054610100900460ff166120585760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b60656120648382612ff4565b5060666107d38282612ff4565b600054610100900460ff166117355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b60006001600160a01b0384163b15612284576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061214b9033908990889088906004016130b4565b6020604051808303816000875af1925050508015612186575060408051601f3d908101601f19168201909252612183918101906130f0565b60015b612239573d8080156121b4576040519150601f19603f3d011682016040523d82523d6000602084013e6121b9565b606091505b5080516000036122315760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610732565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611947565b506001949350505050565b6122998383612460565b6122a660008484846120ee565b6107d35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610732565b61232484848484612606565b600181111561239b5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610732565b816001600160a01b0385166123f7576123f281609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61241a565b836001600160a01b0316856001600160a01b03161461241a5761241a858261268e565b6001600160a01b038416612436576124318161272b565b612459565b846001600160a01b0316846001600160a01b0316146124595761245984826127da565b5050505050565b6001600160a01b0382166124b65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610732565b6000818152606760205260409020546001600160a01b03161561251b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610732565b612529600083836001611fcf565b6000818152606760205260409020546001600160a01b03161561258e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610732565b6001600160a01b0382166000818152606860209081526040808320805460010190558483526067909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001811115611029576001600160a01b0384161561264c576001600160a01b0384166000908152606860205260408120805483929061264690849061310d565b90915550505b6001600160a01b03831615611029576001600160a01b03831660009081526068602052604081208054839290612683908490613120565b909155505050505050565b6000600161269b84610e75565b6126a5919061310d565b6000838152609860205260409020549091508082146126f8576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b60995460009061273d9060019061310d565b6000838152609a60205260408120546099805493945090928490811061276557612765612da7565b90600052602060002001549050806099838154811061278657612786612da7565b6000918252602080832090910192909255828152609a909152604080822084905585825281205560998054806127be576127be613133565b6001900381819060005260206000200160009055905550505050565b60006127e583610e75565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461173e57600080fd5b60006020828403121561285e57600080fd5b81356128698161281e565b9392505050565b60005b8381101561288b578181015183820152602001612873565b50506000910152565b600081518084526128ac816020860160208601612870565b601f01601f19169290920160200192915050565b6020815260006128696020830184612894565b6000602082840312156128e557600080fd5b5035919050565b6001600160a01b038116811461173e57600080fd5b6000806040838503121561291457600080fd5b823561291f816128ec565b946020939093013593505050565b60006020828403121561293f57600080fd5b8135612869816128ec565b60008060006060848603121561295f57600080fd5b833561296a816128ec565b9250602084013561297a816128ec565b929592945050506040919091013590565b6000806040838503121561299e57600080fd5b50508035926020909101359150565b600080600080600060a086880312156129c557600080fd5b85356129d0816128ec565b945060208601356129e0816128ec565b935060408601356129f0816128ec565b9250606086013591506080860135612a07816128ec565b809150509295509295909350565b801515811461173e57600080fd5b60008060408385031215612a3657600080fd5b8235612a41816128ec565b91506020830135612a5181612a15565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ab457612ab4612a5c565b604052919050565b600067ffffffffffffffff821115612ad657612ad6612a5c565b50601f01601f191660200190565b6000612af7612af284612abc565b612a8b565b9050828152838383011115612b0b57600080fd5b828260208301376000602084830101529392505050565b60008060008060808587031215612b3857600080fd5b8435612b43816128ec565b93506020850135612b53816128ec565b925060408501359150606085013567ffffffffffffffff811115612b7657600080fd5b8501601f81018713612b8757600080fd5b612b9687823560208401612ae4565b91505092959194509250565b600082601f830112612bb357600080fd5b61286983833560208501612ae4565b60008060408385031215612bd557600080fd5b823567ffffffffffffffff811115612bec57600080fd5b612bf885828601612ba2565b9250506020830135612a51816128ec565b6020808252825182820181905260009190848201906040850190845b81811015612c4157835183529284019291840191600101612c25565b50909695505050505050565b60008060408385031215612c6057600080fd5b8235612c6b816128ec565b9150602083013567ffffffffffffffff811115612c8757600080fd5b612c9385828601612ba2565b9150509250929050565b60008060408385031215612cb057600080fd5b8235612cbb816128ec565b91506020830135612a51816128ec565b600181811c90821680612cdf57607f821691505b602082108103612d18577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000816000190483118215151615612d6757612d67612d1e565b500290565b600082612da2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000808354612de481612ccb565b60018281168015612dfc5760018114612e1157612e40565b60ff1984168752821515830287019450612e40565b8760005260208060002060005b85811015612e375781548a820152908401908201612e1e565b50505082870194505b50929695505050505050565b60006000198203612e5f57612e5f612d1e565b5060010190565b600080600060608486031215612e7b57600080fd5b8351612e86816128ec565b602085015160409095015190969495509392505050565b600060208284031215612eaf57600080fd5b815161286981612a15565b600060208284031215612ecc57600080fd5b5051919050565b600060208284031215612ee557600080fd5b8151612869816128ec565b86815260c060208201526000612f0960c0830188612894565b604083019690965250921515606084015260808301919091526001600160a01b031660a09091015292915050565b600060208284031215612f4957600080fd5b815167ffffffffffffffff811115612f6057600080fd5b8201601f81018413612f7157600080fd5b8051612f7f612af282612abc565b818152856020838501011115612f9457600080fd5b612fa5826020830160208601612870565b95945050505050565b601f8211156107d357600081815260208120601f850160051c81016020861015612fd55750805b601f850160051c820191505b81811015610e0857828155600101612fe1565b815167ffffffffffffffff81111561300e5761300e612a5c565b6130228161301c8454612ccb565b84612fae565b602080601f831160018114613057576000841561303f5750858301515b600019600386901b1c1916600185901b178555610e08565b600085815260208120601f198616915b8281101561308657888601518255948401946001909101908401613067565b50858210156130a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b038087168352808616602084015250836040830152608060608301526130e66080830184612894565b9695505050505050565b60006020828403121561310257600080fd5b81516128698161281e565b818103818111156105e3576105e3612d1e565b808201808211156105e3576105e3612d1e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212201b19854c2f1fda735b6925f13656cd219f4eca2ba50fe21b742c13927be7fcb064736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c80634f6ccce711610145578063a3106b95116100bd578063b8d1ebfd1161008c578063d0def52111610071578063d0def5211461051a578063e985e9c51461052d578063f2fde38b1461056957600080fd5b8063b8d1ebfd146104e7578063c87b56dd1461050757600080fd5b8063a3106b95146104a3578063a7866a83146104b6578063b88d4fde146104ca578063b8997a97146104dd57600080fd5b8063715018a6116101145780638da5cb5b116100f95780638da5cb5b1461047757806395d89b4114610488578063a22cb4651461049057600080fd5b8063715018a61461045b57806377293cc31461046357600080fd5b80634f6ccce71461040f578063530b97a4146104225780636352211e1461043557806370a082311461044857600080fd5b806328cf1635116101d85780633c3091a1116101a757806341e42f301161018c57806341e42f30146103d557806342842e0e146103e85780634c00de82146103fb57600080fd5b80633c3091a1146103af5780633e4086e5146103c257600080fd5b806328cf1635146103355780632a55205a146103565780632f745c591461038857806334d722c91461039b57600080fd5b8063095ea7b31161022f5780631c9fd0c3116102145780631c9fd0c3146102fc57806323b872dd1461030f57806327125e2f1461032257600080fd5b8063095ea7b3146102df57806318160ddd146102f457600080fd5b8063010a38f51461026157806301ffc9a71461027c57806306fdde031461029f578063081812fc146102b4575b600080fd5b61026961057c565b6040519081526020015b60405180910390f35b61028f61028a36600461284c565b61058d565b6040519015158152602001610273565b6102a76105e9565b60405161027391906128c0565b6102c76102c23660046128d3565b61067b565b6040516001600160a01b039091168152602001610273565b6102f26102ed366004612901565b6106a2565b005b609954610269565b6102f261030a36600461292d565b6107d8565b6102f261031d36600461294a565b610810565b6102a76103303660046128d3565b610897565b6102696103433660046128d3565b6101326020526000908152604090205481565b61036961036436600461298b565b610932565b604080516001600160a01b039093168352602083019190915201610273565b610269610396366004612901565b6109ce565b610130546102c7906001600160a01b031681565b6102f26103bd36600461292d565b610a76565b6102f26103d03660046128d3565b610aae565b6102f26103e336600461292d565b610aea565b6102f26103f636600461294a565b610b22565b61012f546102c7906001600160a01b031681565b61026961041d3660046128d3565b610b3d565b6102f26104303660046129ad565b610be1565b6102c76104433660046128d3565b610e10565b61026961045636600461292d565b610e75565b6102f2610f0f565b610133546102c7906001600160a01b031681565b60fb546001600160a01b03166102c7565b6102a7610f23565b6102f261049e366004612a23565b610f32565b6102f26104b136600461292d565b610f41565b610134546102c7906001600160a01b031681565b6102f26104d8366004612b22565b610fa1565b6102696101315481565b6104fa6104f5366004612bc2565b61102f565b6040516102739190612c09565b6102a76105153660046128d3565b6111f1565b6102f2610528366004612c4d565b611602565b61028f61053b366004612c9d565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b6102f261057736600461292d565b6116b1565b600061058861012d5490565b905090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f2a55205a0000000000000000000000000000000000000000000000000000000014806105e357506105e382611741565b92915050565b6060606580546105f890612ccb565b80601f016020809104026020016040519081016040528092919081815260200182805461062490612ccb565b80156106715780601f1061064657610100808354040283529160200191610671565b820191906000526020600020905b81548152906001019060200180831161065457829003601f168201915b5050505050905090565b600061068682611797565b506000908152606960205260409020546001600160a01b031690565b60006106ad82610e10565b9050806001600160a01b0316836001600160a01b03160361073b5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b336001600160a01b03821614806107575750610757813361053b565b6107c95760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610732565b6107d383836117fb565b505050565b6107e0611876565b610134805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b61081a33826118d0565b61088c5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610732565b6107d383838361194f565b61012e60205260009081526040902080546108b190612ccb565b80601f01602080910402602001604051908101604052809291908181526020018280546108dd90612ccb565b801561092a5780601f106108ff5761010080835404028352916020019161092a565b820191906000526020600020905b81548152906001019060200180831161090d57829003601f168201915b505050505081565b60008281526067602052604081205481906001600160a01b03166109985760405162461bcd60e51b815260206004820152601160248201527f4e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006044820152606401610732565b600061271061013154856109ac9190612d4d565b6109b69190612d6c565b61012f546001600160a01b0316969095509350505050565b60006109d983610e75565b8210610a4d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610732565b506001600160a01b03919091166000908152609760209081526040808320938352929052205490565b610a7e611876565b610133805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610ab6611876565b61013181905560405181907fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c90600090a250565b610af2611876565b61012f805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6107d383838360405180602001604052806000815250610fa1565b6000610b4860995490565b8210610bbc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610732565b60998281548110610bcf57610bcf612da7565b90600052602060002001549050919050565b600054610100900460ff1615808015610c015750600054600160ff909116105b80610c1b5750303b158015610c1b575060005460ff166001145b610c8d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610732565b6000805460ff191660011790558015610ccd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610d416040518060400160405280601181526020017f526162626974486f6c65526563656970740000000000000000000000000000008152506040518060400160405280600381526020017f5248520000000000000000000000000000000000000000000000000000000000815250611b92565b610d49611c19565b610d5282611c96565b61012f80546001600160a01b0380881673ffffffffffffffffffffffffffffffffffffffff199283161790925561013080548784169083161790556101318590556101338054928916929091169190911790558015610e0857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6000818152606760205260408120546001600160a01b0316806105e35760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610732565b60006001600160a01b038216610ef35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152608401610732565b506001600160a01b031660009081526068602052604090205490565b610f17611876565b610f216000611d1c565b565b6060606680546105f890612ccb565b610f3d338383611d7b565b5050565b610f49611876565b610130805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f09e32743122b4d02dc06c38a35ee1587a02854644d47574bb35a6ef75a22fa9890600090a250565b610fab33836118d0565b61101d5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206f7220617070726f766564000000000000000000000000000000000000006064820152608401610732565b61102984848484611e49565b50505050565b6060600061103c83610e75565b905060008167ffffffffffffffff81111561105957611059612a5c565b604051908082528060200260200182016040528015611082578160200160208202803683370190505b5085516020870120909150600090815b848110156111165760006110a688836109ce565b90508261012e60008381526020019081526020016000206040516110ca9190612dd6565b60405180910390200361110357808583815181106110ea576110ea612da7565b6020908102919091010152836110ff81612e4c565b9450505b508061110e81612e4c565b915050611092565b5060008267ffffffffffffffff81111561113257611132612a5c565b60405190808252806020026020018201604052801561115b578160200160208202803683370190505b5090506000805b868110156111e357600086828151811061117e5761117e612da7565b602002602001015111156111d15785818151811061119e5761119e612da7565b60200260200101518383815181106111b8576111b8612da7565b6020908102919091010152816111cd81612e4c565b9250505b806111db81612e4c565b915050611162565b509098975050505050505050565b6000818152606760205260409020546060906001600160a01b031661127e5760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608401610732565b610134546001600160a01b03166112d75760405162461bcd60e51b815260206004820152601460248201527f5175657374466163746f7279206e6f74207365740000000000000000000000006044820152606401610732565b600082815261012e6020526040812080546112f190612ccb565b80601f016020809104026020016040519081016040528092919081815260200182805461131d90612ccb565b801561136a5780601f1061133f5761010080835404028352916020019161136a565b820191906000526020600020905b81548152906001019060200180831161134d57829003601f168201915b5050610134546040517fec461ac40000000000000000000000000000000000000000000000000000000081529495506000948594506001600160a01b03909116925063ec461ac491506113c19086906004016128c0565b606060405180830381865afa1580156113de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114029190612e66565b506040517f9e34070f00000000000000000000000000000000000000000000000000000000815260048101889052919350915082906000906001600160a01b03831690639e34070f90602401602060405180830381865afa15801561146b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148f9190612e9d565b90506000826001600160a01b03166309a69f576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190612eba565b90506000836001600160a01b03166369940d796040518163ffffffff1660e01b8152600401602060405180830381865afa158015611537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155b9190612ed3565b610133546040517fac1733830000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063ac173383906115b0908c908b908a90899089908990600401612ef0565b600060405180830381865afa1580156115cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115f59190810190612f37565b9998505050505050505050565b610130546001600160a01b0316331461165d5760405162461bcd60e51b815260206004820152600b60248201527f4f6e6c79206d696e7465720000000000000000000000000000000000000000006044820152606401610732565b61166c61012d80546001019055565b600061167861012d5490565b600081815261012e602052604090209091506116948382612ff4565b506000818152610132602052604090204290556107d38382611ed2565b6116b9611876565b6001600160a01b0381166117355760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610732565b61173e81611d1c565b50565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806105e357506105e382611eec565b6000818152606760205260409020546001600160a01b031661173e5760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610732565b6000818152606960205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061183d82610e10565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60fb546001600160a01b03163314610f215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610732565b6000806118dc83610e10565b9050806001600160a01b0316846001600160a01b0316148061192357506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b806119475750836001600160a01b031661193c8461067b565b6001600160a01b0316145b949350505050565b826001600160a01b031661196282610e10565b6001600160a01b0316146119de5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610732565b6001600160a01b038216611a595760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610732565b611a668383836001611fcf565b826001600160a01b0316611a7982610e10565b6001600160a01b031614611af55760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610732565b6000818152606960209081526040808320805473ffffffffffffffffffffffffffffffffffffffff199081169091556001600160a01b0387811680865260688552838620805460001901905590871680865283862080546001019055868652606790945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600054610100900460ff16611c0f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b610f3d8282611fdb565b600054610100900460ff16610f215760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b600054610100900460ff16611d135760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b61173e81612071565b60fb80546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031603611ddc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610732565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611e5484848461194f565b611e60848484846120ee565b6110295760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610732565b610f3d82826040518060200160405280600081525061228f565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611f7f57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806105e357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105e3565b61102984848484612318565b600054610100900460ff166120585760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b60656120648382612ff4565b5060666107d38282612ff4565b600054610100900460ff166117355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610732565b60006001600160a01b0384163b15612284576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a029061214b9033908990889088906004016130b4565b6020604051808303816000875af1925050508015612186575060408051601f3d908101601f19168201909252612183918101906130f0565b60015b612239573d8080156121b4576040519150601f19603f3d011682016040523d82523d6000602084013e6121b9565b606091505b5080516000036122315760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610732565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050611947565b506001949350505050565b6122998383612460565b6122a660008484846120ee565b6107d35760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610732565b61232484848484612606565b600181111561239b5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610732565b816001600160a01b0385166123f7576123f281609980546000838152609a60205260408120829055600182018355919091527f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000155565b61241a565b836001600160a01b0316856001600160a01b03161461241a5761241a858261268e565b6001600160a01b038416612436576124318161272b565b612459565b846001600160a01b0316846001600160a01b0316146124595761245984826127da565b5050505050565b6001600160a01b0382166124b65760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610732565b6000818152606760205260409020546001600160a01b03161561251b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610732565b612529600083836001611fcf565b6000818152606760205260409020546001600160a01b03161561258e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610732565b6001600160a01b0382166000818152606860209081526040808320805460010190558483526067909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001811115611029576001600160a01b0384161561264c576001600160a01b0384166000908152606860205260408120805483929061264690849061310d565b90915550505b6001600160a01b03831615611029576001600160a01b03831660009081526068602052604081208054839290612683908490613120565b909155505050505050565b6000600161269b84610e75565b6126a5919061310d565b6000838152609860205260409020549091508082146126f8576001600160a01b03841660009081526097602090815260408083208584528252808320548484528184208190558352609890915290208190555b5060009182526098602090815260408084208490556001600160a01b039094168352609781528383209183525290812055565b60995460009061273d9060019061310d565b6000838152609a60205260408120546099805493945090928490811061276557612765612da7565b90600052602060002001549050806099838154811061278657612786612da7565b6000918252602080832090910192909255828152609a909152604080822084905585825281205560998054806127be576127be613133565b6001900381819060005260206000200160009055905550505050565b60006127e583610e75565b6001600160a01b039093166000908152609760209081526040808320868452825280832085905593825260989052919091209190915550565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461173e57600080fd5b60006020828403121561285e57600080fd5b81356128698161281e565b9392505050565b60005b8381101561288b578181015183820152602001612873565b50506000910152565b600081518084526128ac816020860160208601612870565b601f01601f19169290920160200192915050565b6020815260006128696020830184612894565b6000602082840312156128e557600080fd5b5035919050565b6001600160a01b038116811461173e57600080fd5b6000806040838503121561291457600080fd5b823561291f816128ec565b946020939093013593505050565b60006020828403121561293f57600080fd5b8135612869816128ec565b60008060006060848603121561295f57600080fd5b833561296a816128ec565b9250602084013561297a816128ec565b929592945050506040919091013590565b6000806040838503121561299e57600080fd5b50508035926020909101359150565b600080600080600060a086880312156129c557600080fd5b85356129d0816128ec565b945060208601356129e0816128ec565b935060408601356129f0816128ec565b9250606086013591506080860135612a07816128ec565b809150509295509295909350565b801515811461173e57600080fd5b60008060408385031215612a3657600080fd5b8235612a41816128ec565b91506020830135612a5181612a15565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ab457612ab4612a5c565b604052919050565b600067ffffffffffffffff821115612ad657612ad6612a5c565b50601f01601f191660200190565b6000612af7612af284612abc565b612a8b565b9050828152838383011115612b0b57600080fd5b828260208301376000602084830101529392505050565b60008060008060808587031215612b3857600080fd5b8435612b43816128ec565b93506020850135612b53816128ec565b925060408501359150606085013567ffffffffffffffff811115612b7657600080fd5b8501601f81018713612b8757600080fd5b612b9687823560208401612ae4565b91505092959194509250565b600082601f830112612bb357600080fd5b61286983833560208501612ae4565b60008060408385031215612bd557600080fd5b823567ffffffffffffffff811115612bec57600080fd5b612bf885828601612ba2565b9250506020830135612a51816128ec565b6020808252825182820181905260009190848201906040850190845b81811015612c4157835183529284019291840191600101612c25565b50909695505050505050565b60008060408385031215612c6057600080fd5b8235612c6b816128ec565b9150602083013567ffffffffffffffff811115612c8757600080fd5b612c9385828601612ba2565b9150509250929050565b60008060408385031215612cb057600080fd5b8235612cbb816128ec565b91506020830135612a51816128ec565b600181811c90821680612cdf57607f821691505b602082108103612d18577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000816000190483118215151615612d6757612d67612d1e565b500290565b600082612da2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000808354612de481612ccb565b60018281168015612dfc5760018114612e1157612e40565b60ff1984168752821515830287019450612e40565b8760005260208060002060005b85811015612e375781548a820152908401908201612e1e565b50505082870194505b50929695505050505050565b60006000198203612e5f57612e5f612d1e565b5060010190565b600080600060608486031215612e7b57600080fd5b8351612e86816128ec565b602085015160409095015190969495509392505050565b600060208284031215612eaf57600080fd5b815161286981612a15565b600060208284031215612ecc57600080fd5b5051919050565b600060208284031215612ee557600080fd5b8151612869816128ec565b86815260c060208201526000612f0960c0830188612894565b604083019690965250921515606084015260808301919091526001600160a01b031660a09091015292915050565b600060208284031215612f4957600080fd5b815167ffffffffffffffff811115612f6057600080fd5b8201601f81018413612f7157600080fd5b8051612f7f612af282612abc565b818152856020838501011115612f9457600080fd5b612fa5826020830160208601612870565b95945050505050565b601f8211156107d357600081815260208120601f850160051c81016020861015612fd55750805b601f850160051c820191505b81811015610e0857828155600101612fe1565b815167ffffffffffffffff81111561300e5761300e612a5c565b6130228161301c8454612ccb565b84612fae565b602080601f831160018114613057576000841561303f5750858301515b600019600386901b1c1916600185901b178555610e08565b600085815260208120601f198616915b8281101561308657888601518255948401946001909101908401613067565b50858210156130a45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b038087168352808616602084015250836040830152608060608301526130e66080830184612894565b9695505050505050565b60006020828403121561310257600080fd5b81516128698161281e565b818103818111156105e3576105e3612d1e565b808201808211156105e3576105e3612d1e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212201b19854c2f1fda735b6925f13656cd219f4eca2ba50fe21b742c13927be7fcb064736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getOwnedTokenIdsOfQuest(string,address)": {
        "details": "get the token ids for a quest owned by an address",
        "params": {
          "claimingAddress_": "the address claiming to own the tokens",
          "questId_": "the quest id"
        }
      },
      "getTokenId()": {
        "details": "get the current token id"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "mint(address,string)": {
        "details": "mint a receipt",
        "params": {
          "questId_": "the quest id",
          "to_": "the address to mint to"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "See {IERC165-royaltyInfo}",
        "params": {
          "salePrice_": "the sale price",
          "tokenId_": "the token id"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setMinterAddress(address)": {
        "details": "set the minter address",
        "params": {
          "minterAddress_": "the address of the minter"
        }
      },
      "setQuestFactory(address)": {
        "details": "set the quest factory contract",
        "params": {
          "questFactory_": "the address of the quest factory contract"
        }
      },
      "setReceiptRenderer(address)": {
        "details": "set the receipt renderer contract",
        "params": {
          "receiptRenderer_": "the address of the receipt renderer contract"
        }
      },
      "setRoyaltyFee(uint256)": {
        "details": "set the royalty fee",
        "params": {
          "royaltyFee_": "the royalty fee"
        }
      },
      "setRoyaltyRecipient(address)": {
        "details": "set the royalty recipient",
        "params": {
          "royaltyRecipient_": "the address of the royalty recipient"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "returns true if the supplied interface id is supported",
        "params": {
          "interfaceId_": "the interface id"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "return the token uri, this delegates to the receipt renderer contract"
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 566,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 569,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4373,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5027,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2396,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 2398,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 2402,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2406,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2410,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2416,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3336,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 3501,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3505,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3508,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_allTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3512,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3844,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 3873,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3989,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10816,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 10940,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12222,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(Counter)4380_storage"
      },
      {
        "astId": 12226,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "questIdForTokenId",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 12228,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "royaltyRecipient",
        "offset": 0,
        "slot": "303",
        "type": "t_address"
      },
      {
        "astId": 12230,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "minterAddress",
        "offset": 0,
        "slot": "304",
        "type": "t_address"
      },
      {
        "astId": 12232,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "royaltyFee",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 12236,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "timestampForTokenId",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12239,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "ReceiptRendererContract",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(ReceiptRenderer)13737"
      },
      {
        "astId": 12242,
        "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
        "label": "QuestFactoryContract",
        "offset": 0,
        "slot": "308",
        "type": "t_contract(IQuestFactory)13946"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IQuestFactory)13946": {
        "encoding": "inplace",
        "label": "contract IQuestFactory",
        "numberOfBytes": "20"
      },
      "t_contract(ReceiptRenderer)13737": {
        "encoding": "inplace",
        "label": "contract ReceiptRenderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)4380_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 4379,
            "contract": "contracts/RabbitHoleReceipt.sol:RabbitHoleReceipt",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}